<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Portal</name>
    </assembly>
    <members>
        <member name="T:Portal.Detect.DetectManager">
            <summary>
            Manager for detecting an image(<see cref="T:Portal.Detect.Template"/>) on the screen.
            
            There are functions in <see cref="T:Portal.Script.ScriptCallables"/> which should be used instead of these functions, as these are only intended to be "base" functions to find templates.
            </summary>
        </member>
        <member name="M:Portal.Detect.DetectManager.FindMatchInternal(Portal.Detect.Template,Portal.Detect.SearchOptions,System.Boolean)">
            <summary>
            Captures a region and tries to compare a template to it.
            </summary>
            <param name="InTemplate">Template to search for.</param>
            <param name="InSearchOptions">Options to search with.</param>
            <param name="InbShouldPrint" />
            <returns>Returns the best match found.</returns>
        </member>
        <member name="M:Portal.Detect.DetectManager.FindMatchesInternal(Portal.Detect.Template,Portal.Detect.SearchOptions,System.Boolean)">
            <summary>
            Captures a region and tries to compare a template to it.
            </summary>
            <param name="InTemplate">Template to search for.</param>
            <param name="InSearchOptions">Options to search with.</param>
            <param name="InbShouldPrint" />
            <returns>Returns all matches found with the specified search options.</returns>
        </member>
        <member name="M:Portal.Detect.DetectManager.FindMatchesInternal(System.Collections.Generic.IEnumerable{Portal.Detect.Template},Portal.Detect.SearchOptions,System.Boolean)">
            <summary>
            Captures a region and tries to compare a template to it.
            </summary>
            <param name="InTemplates">Templates to search for.</param>
            <param name="InSearchOptions">Options to search with.</param>
            <param name="InbShouldPrint" />
            <returns>Returns all matches found with the specified search options.</returns>
        </member>
        <member name="T:Portal.Detect.Match">
            <summary>
            Result(s) of image detection is stored as a Match.
            </summary>
        </member>
        <member name="P:Portal.Detect.Match.Template">
            <summary> Template from search. </summary>
        </member>
        <member name="P:Portal.Detect.Match.Region">
            <summary> Region(coordinates) of match. </summary>
        </member>
        <member name="P:Portal.Detect.Match.Confidence">
            <summary> Confidence of match. </summary>
        </member>
        <member name="P:Portal.Detect.Match.Frame">
            <summary> If <see cref="P:Portal.Detect.SearchOptions.bWantsFrameCaptured"/> is true, this will be the frame that was used for the search. </summary>
        </member>
        <member name="M:Portal.Detect.Match.#ctor(System.String,Portal.GameRegion,System.Double,OpenCvSharp.Mat)">
            <summary>
            Match constructor.
            </summary>
            <param name="InTemplate"/>
            <param name="InRegion"/>
            <param name="InConfidence"/>
            <param name="InFrame"> Will only be set if <see cref="P:Portal.Detect.SearchOptions.bWantsFrameCaptured"/> is true. </param>
        </member>
        <member name="M:Portal.Detect.Match.Draw(System.Int32,System.Nullable{Vortice.Mathematics.Color4})">
            <summary>
            Draws the image detection result(match) on the screen.
            </summary>
            <remarks>
            See <see cref="M:Portal.UI.Drawer.DrawerWindow.Draw(System.Guid,Portal.UI.Drawer.DrawData,System.Int32)"/> for more information
            </remarks>
            <param name="InDuration"/>
            <param name="InColor"/>
        </member>
        <member name="M:Portal.Detect.Match.Click(System.Nullable{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Moves the mouse to the center of the result(match), and clicks.
            </summary>
            <remarks>
            See <see cref="M:Portal.Input.InputManager.Click(System.Nullable{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)"/> for more information
            </remarks>
            <param name="InInput"/>
            <param name="InInputOptions"/>
            <param name="InMouseMoveOptions"/>
            <param name="InbUseRegionAsDestRange"/>
        </member>
        <member name="M:Portal.Detect.Match.Move(System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Moves the mouse to the center of the result(match).
            </summary>
            <remarks>
            See <see cref="M:Portal.Input.InputManager.MouseMove(Portal.Input.MouseMoveOptions,System.Boolean)"/> for more information
            </remarks>
            <param name="InMouseMoveOptions"/>
            <param name="InbUseRegionAsDestRange"/>
        </member>
        <member name="M:Portal.Detect.Match.ToString">
            <summary> Overridden ToString function. </summary>
            <returns> Output: (<see cref="P:Portal.Detect.Match.Template"/>, <see cref="P:Portal.Detect.Match.Region"/>, <see cref="P:Portal.Detect.Match.Confidence"/>) </returns>
        </member>
        <member name="M:Portal.Detect.Match.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Portal.Detect.RepeatOptions">
            <summary>
            Repeat options for image detection.
            </summary>
            <example>
            Usage:
            <code>
                RepeatOptions MyRepeatOptions = new(100, 50);
            </code>
            Default values can also be used.
            Example:
            <code>
                RepeatOptions MyRepeatOptions = RepeatOptions.Default; // Translates to new(1, 0);
                RepeatOptions MyRepeatOptions = RepeatOptions.LowDelay; // Translates to new(3, 50);
                RepeatOptions MyRepeatOptions = RepeatOptions.HighDelay; // Translates to new(3, 250);
            </code>
            Can also be created using builder pattern.
            Example:
            <code>
                RepeatOptions MyRepeatOptions = new()
                    .WithMaxTries(100)
                    .WithDelayBetweenSearches(50);
            </code>
            </example>
        </member>
        <member name="P:Portal.Detect.RepeatOptions.MaxTries">
            <summary> Maximum amount of tries. </summary>
        </member>
        <member name="P:Portal.Detect.RepeatOptions.DelayBetweenSearches">
            <summary> Delay between each try. </summary>
        </member>
        <member name="P:Portal.Detect.RepeatOptions.Default">
            <summary>
            Creates a new <see cref="T:Portal.Detect.RepeatOptions"/> with the values 1 and 0 for <see cref="P:Portal.Detect.RepeatOptions.MaxTries"/> and <see cref="P:Portal.Detect.RepeatOptions.DelayBetweenSearches"/> respectively.
            </summary>
        </member>
        <member name="P:Portal.Detect.RepeatOptions.LowDelay">
            <summary>
            Creates a new <see cref="T:Portal.Detect.RepeatOptions"/> with the values 3 and 50 for <see cref="P:Portal.Detect.RepeatOptions.MaxTries"/> and <see cref="P:Portal.Detect.RepeatOptions.DelayBetweenSearches"/> respectively.
            </summary>
        </member>
        <member name="P:Portal.Detect.RepeatOptions.HighDelay">
            <summary>
            Creates a new <see cref="T:Portal.Detect.RepeatOptions"/> with the values 3 and 250 for <see cref="P:Portal.Detect.RepeatOptions.MaxTries"/> and <see cref="P:Portal.Detect.RepeatOptions.DelayBetweenSearches"/> respectively.
            </summary>
        </member>
        <member name="M:Portal.Detect.RepeatOptions.WithMaxTries(System.Int32)">
            <summary>
            Sets <see cref="P:Portal.Detect.RepeatOptions.MaxTries"/> to <paramref name="InMaxTries"/>.
            </summary>
            <param name="InMaxTries"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Detect.RepeatOptions.WithDelayBetweenSearches(System.Int32)">
            <summary>
            Sets <see cref="P:Portal.Detect.RepeatOptions.DelayBetweenSearches"/> to <paramref name="InDelayBetweenSearches"/>.
            </summary>
            <param name="InDelayBetweenSearches"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Detect.RepeatOptions.#ctor(System.Int32,System.Int32)">
            <summary>
            RepeatOptions constructor.
            </summary>
            <param name="InMaxTries"/>
            <param name="InDelayBetweenSearches"/>
        </member>
        <member name="M:Portal.Detect.RepeatOptions.#ctor">
            <summary>
            RepeatOptions constructor.
            Is the same as <see cref="P:Portal.Detect.RepeatOptions.Default"/>.
            </summary>
        </member>
        <member name="M:Portal.Detect.RepeatOptions.ToString">
            <summary> Overridden ToString function. </summary>
            <returns> Output: (<see cref="P:Portal.Detect.RepeatOptions.MaxTries"/>, <see cref="P:Portal.Detect.RepeatOptions.DelayBetweenSearches"/>) </returns>
        </member>
        <member name="T:Portal.Detect.SearchOptions">
            <summary>
            Search options for image detection.
            Default search options are found in config.ini.
            </summary>
            <example>
            Usage:
            <code>
                SearchOptions MySearchOptions = new(new(0, 0, 100, 100));
                SearchOptions MySearchOptions = new(new(0, 0, 100, 100), 0.80, CCORR, 3);
            </code>
            Can also be created from a GameRegion.
            Example:
            <code>
                SearchOptions MySearchOptions = new GameRegion(0, 0, 100, 100);
            </code>
            Can also be created using builder pattern.
            Example:
            <code>
                SearchOptions MySearchOptions = new()
                    .WithRegion(new(0, 0, 100, 100))
                    .WithThreshold(0.80)
                    .WithMethod(CCORR)
                    .WithColorType(3);
            </code>
            </example>
        </member>
        <member name="P:Portal.Detect.SearchOptions.Region">
            <summary> Search region. </summary>
        </member>
        <member name="P:Portal.Detect.SearchOptions.Threshold">
            <summary> Search threshold. </summary>
        </member>
        <member name="P:Portal.Detect.SearchOptions.Method">
            <summary> Search method. <br/> See <see cref="T:Portal.Detect.Template"/> remarks. </summary>
        </member>
        <member name="P:Portal.Detect.SearchOptions.ColorType">
            <summary> Search image type. <br/> See <see cref="T:Portal.Detect.Template"/> remarks. </summary>
        </member>
        <member name="P:Portal.Detect.SearchOptions.FrameToSearch">
            <summary> If not null, will be used as the frame to be searched instead of one of the latest captured frames. </summary>
        </member>
        <member name="P:Portal.Detect.SearchOptions.bWantsFrameCaptured">
            <summary> If true, frame that was used for the search will be stored as <see cref="T:System.Windows.Controls.Frame"/>. </summary>
        </member>
        <member name="P:Portal.Detect.SearchOptions.bPrioritizeTemplateOptions">
            <summary> If true, will prioritize template options(suffixes). <br/> See <see cref="T:Portal.Detect.Template"/> remarks. </summary>
        </member>
        <member name="P:Portal.Detect.SearchOptions.bForceSearch">
            <summary> Searches even when script is stopped. </summary>
        </member>
        <member name="M:Portal.Detect.SearchOptions.#ctor(System.Nullable{Portal.GameRegion},System.Nullable{System.Double},System.Nullable{OpenCvSharp.TemplateMatchModes},System.Nullable{OpenCvSharp.ImreadModes},OpenCvSharp.Mat,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            SearchOptions constructor.
            </summary>
            <param name="InRegion"/>
            <param name="InThreshold"/>
            <param name="InMethod"/>
            <param name="InColorType"/>
            <param name="InFrameToSearch"/>
            <param name="InbWantsFrameCaptured"/>
            <param name="InbPrioritizeTemplateOptions"/>
            <param name="InbForceSearch"/>
        </member>
        <member name="M:Portal.Detect.SearchOptions.op_Implicit(Portal.GameRegion)~Portal.Detect.SearchOptions">
            <summary> Cast operator. <br/> Allows you to cast a GameRegion to SearchOptions. <br/> See <see cref="T:Portal.Detect.SearchOptions"/> for more information. </summary>
        </member>
        <member name="M:Portal.Detect.SearchOptions.ToString">
            <summary> Overridden ToString function. </summary>
            <returns> Output: (R<see cref="P:Portal.Detect.SearchOptions.Region"/>, T<see cref="P:Portal.Detect.SearchOptions.Threshold"/>, M<see cref="P:Portal.Detect.SearchOptions.Method"/>, C<see cref="P:Portal.Detect.SearchOptions.ColorType"/>)</returns>
        </member>
        <member name="T:Portal.Detect.Template">
             <summary>
             Template for image detection.
             </summary>
             <remarks>
             Templates are automatically imported from your "Templates" folder in your module folder when the app is started, when you press the Reload button and when the folders contents are changed.
            
             Templates MUST be a .png image.
            
             Templates have an associated .meta file, which contains the template's options.
             Options are as follows:
            
             Threshold can be set by setting "Threshold".
             Values are clamped between 0 and 100, as they are percentages.
             
             Method can be set by setting "Method".
             There are three different methods - "CCOEFF", "CCORR" and "SQDIFF".
             Each has their advantages and disadvantages. For example "CCOEFF" is slow, but has good accuracy.
            
             Color type can be set by setting "ColorType".
             There are two different color types - "Grayscale" and "Color".
             "Grayscale" is way faster, but is a little bit less accurate.
             
             A default region can be set by setting "Region".
             An example would be "45 45 55 55" which would be a rectangle in the center of the game window, with a size of 10% of the game window.
             Values are clamped between 0 and 100, as they are percentages of the game window and it wouldn't make sense to go outside it.
            
             Amount of frames to search for can be set by using "F" before the value. OUTDATED
             Values can go from 1 to "DETECTION_FRAMEPOOL_SIZE"(from config).
             <br/>
             Masks are generated from your (image)file's alpha channel.
             </remarks>
        </member>
        <member name="P:Portal.Detect.Template.Name">
            <summary> Template name. </summary>
        </member>
        <member name="P:Portal.Detect.Template.Image">
            <summary> Template image matrix. </summary>
        </member>
        <member name="P:Portal.Detect.Template.Mask">
            <summary> Template mask matrix from image alpha. <br/> See <see cref="T:Portal.Detect.Template"/> remarks. </summary>
        </member>
        <member name="P:Portal.Detect.Template.Threshold">
            <summary> Template threshold. </summary>
        </member>
        <member name="P:Portal.Detect.Template.Method">
            <summary> Template method. <br/> See <see cref="T:Portal.Detect.Template"/> remarks. </summary>
        </member>
        <member name="P:Portal.Detect.Template.ColorType">
            <summary> Template image type. <br/> See <see cref="T:Portal.Detect.Template"/> remarks. </summary>
        </member>
        <member name="P:Portal.Detect.Template.DefaultRegion">
            <summary> Template default region. <br/> See <see cref="T:Portal.Detect.Template"/> remarks. </summary>
        </member>
        <member name="P:Portal.Detect.Template.FramesToSearch">
            <summary> Template frames to search. <br/> See <see cref="T:Portal.Detect.Template"/> remarks. </summary>
        </member>
        <member name="P:Portal.Detect.Template.Size">
            <summary> Template size, which is set from image matrix size. </summary>
        </member>
        <member name="P:Portal.Detect.Template.W">
            <summary> Template width, gets <see cref="P:Portal.Size.Width"/>. </summary>
        </member>
        <member name="P:Portal.Detect.Template.H">
            <summary> Template height, gets <see cref="P:Portal.Size.Height"/>. </summary>
        </member>
        <member name="M:Portal.Detect.Template.#ctor(System.String,OpenCvSharp.Mat,OpenCvSharp.Mat,System.Nullable{System.Double},System.Nullable{OpenCvSharp.TemplateMatchModes},System.Nullable{OpenCvSharp.ImreadModes},System.Nullable{Portal.GameRegion},System.Nullable{System.Int32})">
            <summary>
            Template constructor.
            </summary>
            <param name="InName"/>
            <param name="InImage"/>
            <param name="InMask"/>
            <param name="InThreshold"/>
            <param name="InMethod"/>
            <param name="InImageType"/>
            <param name="InDefaultRegion"/>
            <param name="InFramesToSearch"/>
        </member>
        <member name="M:Portal.Detect.Template.op_Implicit(System.String)~Portal.Detect.Template">
            <summary> Cast operator. <br/> Allows you to cast a string to a Template from your "Templates" folder. </summary>
        </member>
        <member name="M:Portal.Detect.Template.ToString">
            <summary> Overridden ToString function. </summary>
            <returns> Output: (<see cref="P:Portal.Detect.Template.Name"/>, <see cref="P:Portal.Detect.Template.Threshold"/>, <see cref="P:Portal.Detect.Template.Method"/>, <see cref="P:Portal.Detect.Template.ColorType"/>, <see cref="P:Portal.Detect.Template.DefaultRegion"/>, <see cref="P:Portal.Detect.Template.FramesToSearch"/>) </returns>
        </member>
        <member name="T:Portal.Input.InputData">
            <summary>
            Input data.
            </summary>
        </member>
        <member name="P:Portal.Input.InputData.Key">
            <summary> Key to send. </summary>
        </member>
        <member name="P:Portal.Input.InputData.KeyState">
            <summary> Key state to send key with (Up or Down). </summary>
        </member>
        <member name="P:Portal.Input.InputData.Data">
            <summary> Extra data to send, like scroll wheel delta, or which mouse X button was pressed. </summary>
        </member>
        <member name="M:Portal.Input.InputData.#ctor(Portal.Input.EKey,Portal.Input.EKeyState,System.Nullable{System.UInt32})">
            <summary>
            InputOptions constructor that takes a press delay, a release delay and extra data.
            </summary>
            <param name="InKey"/>
            <param name="InKeyState"/>
            <param name="InData"/>
        </member>
        <member name="M:Portal.Input.InputData.IsMouseInput">
            <summary>
            Checks if this is mouse input.
            </summary>
            <returns>True if <see cref="P:Portal.Input.InputData.Key"/> is <see cref="F:Portal.Input.EKey.LButton"/> or <see cref="F:Portal.Input.EKey.RButton"/> or <see cref="F:Portal.Input.EKey.XButton1"/> or <see cref="F:Portal.Input.EKey.XButton2"/> or <see cref="F:Portal.Input.EKey.MButton"/></returns>
        </member>
        <member name="M:Portal.Input.InputData.op_Implicit(Portal.Input.EKey)~Portal.Input.InputData">
            <summary> Cast operator. <br/> Allows you to cast <see cref="T:Portal.Input.EKey"/> to input. </summary>
        </member>
        <member name="T:Portal.Input.EKeyState">
            <summary>
            Key state.
            </summary>
        </member>
        <member name="F:Portal.Input.EKeyState.None">
            <summary/>
        </member>
        <member name="F:Portal.Input.EKeyState.Up">
            <summary/>
        </member>
        <member name="F:Portal.Input.EKeyState.Down">
            <summary/>
        </member>
        <member name="T:Portal.Input.EMouseMoveType">
            <summary>
            Mouse move types.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseMoveType.Instant">
            <summary>
            Instantly move the mouse to the destination.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseMoveType.Human">
            <summary>
            Moves the mouse with human-like movement.
            </summary>
        </member>
        <member name="T:Portal.Input.EMouseEvent">
            <summary>
            Mouse events
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.Move">
            <summary>
            Movement occurred.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.LeftDown">
            <summary>
            Left button down.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.LeftUp">
            <summary>
            Left button up.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.RightDown">
            <summary>
            Right button down.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.RightUp">
            <summary>
            Right button up.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.MiddleDown">
            <summary>
            Middle button down.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.MiddleUp">
            <summary>
            Middle button up.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.XDown">
            <summary>
            X button down.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.XUp">
            <summary>
            X button up.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.Wheel">
            <summary>
            The wheel has been moved, if the mouse has a wheel. The amount of movement is specified in dwData
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.HWheel">
            <summary>
            The wheel button is tilted.
            </summary>
        </member>
        <member name="F:Portal.Input.EMouseEvent.Absolute">
            <summary>
            The dx and dy parameters contain normalized absolute coordinates. If not set,
            those parameters contain relative data: the change in position since the last
            reported position. This flag can be set, or not set, regardless of what kind
            of mouse or mouse-like device, if any, is connected to the system. For further
            information about relative mouse motion, see the following Remarks section.
            </summary>
        </member>
        <member name="T:Portal.Input.EKeyEvent">
            <summary>
            
            </summary>
        </member>
        <member name="F:Portal.Input.EKeyEvent.EXTENDEDKEY">
            <summary>
            Extended key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKeyEvent.KEYUP">
            <summary>
            Key down.
            </summary>
        </member>
        <member name="F:Portal.Input.EKeyEvent.SCANCODE">
            <summary>
            Scan code.
            </summary>
        </member>
        <member name="F:Portal.Input.EKeyEvent.UNICODE">
            <summary>
            Unicode.
            </summary>
        </member>
        <member name="T:Portal.Input.EKeyModifier">
            <summary>
            Key modifiers.
            </summary>
        </member>
        <member name="F:Portal.Input.EKeyModifier.None">
            <summary/>
        </member>
        <member name="F:Portal.Input.EKeyModifier.Alt">
            <summary/>
        </member>
        <member name="F:Portal.Input.EKeyModifier.Control">
            <summary/>
        </member>
        <member name="F:Portal.Input.EKeyModifier.Shift">
            <summary/>
        </member>
        <member name="F:Portal.Input.EKeyModifier.Windows">
            <summary/>
        </member>
        <member name="T:Portal.Input.EKey">
            <summary>
            Keys.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Modifiers">
            <summary>
            The bitmask to extract modifiers from a key value.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.None">
            <summary>
            No key pressed.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LButton">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.RButton">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.WButton">
            <summary>
            The Scroll Wheel key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Cancel">
            <summary>
            The CANCEL key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.MButton">
            <summary>
            The middle mouse button (three-button mouse).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.XButton1">
            <summary>
            The first x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.XButton2">
            <summary>
            The second x mouse button (five-button mouse).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Back">
            <summary>
            The BACKSPACE key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Tab">
            <summary>
            The TAB key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LineFeed">
            <summary>
            The LINEFEED key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Clear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Return">
            <summary>
            The RETURN key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Enter">
            <summary>
            The ENTER key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Shift">
            <summary>
            The SHIFT key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Control">
            <summary>
            The CTRL key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Alt">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Pause">
            <summary>
            The PAUSE key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Capital">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.CapsLock">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.KanaMode">
            <summary>
            The IME Kana mode key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.HanguelMode">
            <summary>
            The IME Hanguel mode key. (maintained for compatibility; use HangulMode)
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.HangulMode">
            <summary>
            The IME Hangul mode key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.JunjaMode">
            <summary>
            The IME Junja mode key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.FinalMode">
            <summary>
            The IME final mode key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.HanjaMode">
            <summary>
            The IME Hanja mode key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.KanjiMode">
            <summary>
            The IME Kanji mode key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Escape">
            <summary>
            The ESC key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.IMEConvert">
            <summary>
            The IME convert key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.IMENonconvert">
            <summary>
            The IME nonconvert key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.IMEAccept">
            <summary>
            The IME accept key, replaces System.Windows.Forms.Keys.IMEAceept.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.IMEAceept">
            <summary>
            The IME accept key. Obsolete, use System.Windows.Forms.Keys.IMEAccept instead.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.IMEModeChange">
            <summary>
            The IME mode change key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Space">
            <summary>
            The SPACEBAR key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Prior">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.PageUp">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Next">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.PageDown">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.End">
            <summary>
            The END key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Home">
            <summary>
            The HOME key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Left">
            <summary>
            The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Up">
            <summary>
            The UP ARROW key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Right">
            <summary>
            The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Down">
            <summary>
            The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Select">
            <summary>
            The SELECT key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Print">
            <summary>
            The PRINT key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Execute">
            <summary>
            The EXECUTE key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Snapshot">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.PrintScreen">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Insert">
            <summary>
            The INS key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Delete">
            <summary>
            The DEL key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Help">
            <summary>
            The HELP key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LWin">
            <summary>
            The left Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.RWin">
            <summary>
            The right Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Apps">
            <summary>
            The application key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Sleep">
            <summary>
            The computer sleep key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad0">
            <summary>
            The 0 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad1">
            <summary>
            The 1 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad2">
            <summary>
            The 2 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad3">
            <summary>
            The 3 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad4">
            <summary>
            The 4 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad5">
            <summary>
            The 5 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad6">
            <summary>
            The 6 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad7">
            <summary>
            The 7 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad8">
            <summary>
            The 8 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumPad9">
            <summary>
            The 9 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Multiply">
            <summary>
            The multiply key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Add">
            <summary>
            The add key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Separator">
            <summary>
            The separator key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Subtract">
            <summary>
            The subtract key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Decimal">
            <summary>
            The decimal key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Divide">
            <summary>
            The divide key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NumLock">
            <summary>
            The NUM LOCK key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Scroll">
            <summary>
            The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LShift">
            <summary>
            The left SHIFT key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.RShift">
            <summary>
            The right SHIFT key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LControl">
            <summary>
            The left CTRL key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.RControl">
            <summary>
            The right CTRL key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LAlt">
            <summary>
            The left ALT key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.RAlt">
            <summary>
            The right ALT key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.BrowserBack">
            <summary>
            The browser back key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.BrowserForward">
            <summary>
            The browser forward key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.BrowserRefresh">
            <summary>
            The browser refresh key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.BrowserStop">
            <summary>
            The browser stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.BrowserSearch">
            <summary>
            The browser search key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.BrowserFavorites">
            <summary>
            The browser favorites key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.BrowserHome">
            <summary>
            The browser home key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.VolumeMute">
            <summary>
            The volume mute key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.VolumeDown">
            <summary>
            The volume down key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.VolumeUp">
            <summary>
            The volume up key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.MediaNextTrack">
            <summary>
            The media next track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.MediaPreviousTrack">
            <summary>
            The media previous track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.MediaStop">
            <summary>
            The media Stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.MediaPlayPause">
            <summary>
            The media play pause key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LaunchMail">
            <summary>
            The launch mail key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.SelectMedia">
            <summary>
            The select media key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LaunchApplication1">
            <summary>
            The start application one key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.LaunchApplication2">
            <summary>
            The start application two key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem1">
            <summary>
            The OEM 1 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oemplus">
            <summary>
            The OEM plus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oemcomma">
            <summary>
            The OEM comma key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemMinus">
            <summary>
            The OEM minus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemPeriod">
            <summary>
            The OEM period key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem2">
            <summary>
            The OEM 2 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oemtilde">
            <summary>
            The OEM tilde key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem3">
            <summary>
            The OEM 3 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem4">
            <summary>
            The OEM 4 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem5">
            <summary>
            The OEM 5 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem6">
            <summary>
            The OEM 6 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem7">
            <summary>
            The OEM 7 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem8">
            <summary>
            The OEM 8 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Oem102">
            <summary>
            The OEM 102 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.ProcessKey">
            <summary>
            The PROCESS KEY key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Packet">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The Packet key value is the low word of a 32-bit virtual-key value used for non-keyboard input methods.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Attn">
            <summary>
            The ATTN key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Crsel">
            <summary>
            The CRSEL key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Exsel">
            <summary>
            The EXSEL key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.EraseEof">
            <summary>
            The ERASE EOF key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Play">
            <summary>
            The PLAY key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Zoom">
            <summary>
            The ZOOM key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.NoName">
            <summary>
            A constant reserved for future use.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.Pa1">
            <summary>
            The PA1 key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.OemClear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.KeyCode">
            <summary>
            The bitmask to extract modifiers from a key value.
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.ShiftM">
            <summary>
            The SHIFT modifier key. NOT USED
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.ControlM">
            <summary>
            The CTRL modifier key. NOT USED
            </summary>
        </member>
        <member name="F:Portal.Input.EKey.AltM">
            <summary>
            The ALT modifier key. NOT USED
            </summary>
        </member>
        <member name="T:Portal.Input.InputManager">
            <summary>
            Input manager, responsible for sending input, and handling keybinds.
            </summary>
        </member>
        <member name="P:Portal.Input.InputManager.Keybinds">
            <summary>
            Keybinds.
            </summary>
        </member>
        <member name="P:Portal.Input.InputManager.PressedKeys">
            <summary>
            Currently pressed keys.
            </summary>
        </member>
        <member name="P:Portal.Input.InputManager.PressedModifierKeys">
            <summary>
            Currently pressed modifier keys.
            </summary>
        </member>
        <member name="P:Portal.Input.InputManager.BindableFunctions">
            <summary>
            Bindable functions.
            </summary>
        </member>
        <member name="P:Portal.Input.InputManager.TicksSinceLastMouseMove">
            <summary>
            Ticks since last mouse move.
            </summary>
        </member>
        <member name="P:Portal.Input.InputManager.bIsMovingMouse">
            <summary>
            True if mouse is moving.
            </summary>
        </member>
        <member name="P:Portal.Input.InputManager.MousePositionGlobal">
            <summary>
            Mouse position in global coordinates.
            </summary>
        </member>
        <member name="P:Portal.Input.InputManager.MousePosition">
            <summary>
            Mouse position in game coordinates.
            </summary>
        </member>
        <member name="M:Portal.Input.InputManager._Initialize">
            <inheritdoc />
        </member>
        <member name="M:Portal.Input.InputManager.Tick">
            <inheritdoc />
        </member>
        <member name="M:Portal.Input.InputManager.IsModifiersPressed(Portal.Input.EKeyModifier,System.Boolean)">
            <summary>
            Checks if the specified key modifiers are pressed.
            </summary>
            <param name="InModifiers">Modifiers to check.</param>
            <param name="InbExactModifiers">Wheter to check for exact modifiers.</param>
            <returns>True if the specified key modifiers are pressed.</returns>
        </member>
        <member name="M:Portal.Input.InputManager.IsKeyPressed(Portal.Input.EKey)">
            <summary>
            Checks if the specified key is pressed.
            </summary>
            <param name="InKey">Key to check.</param>
            <returns>True if the specified key is pressed.</returns>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,System.Boolean)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InbExactModifiers">Wheter to check for exact modifiers.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,System.Boolean,System.Boolean)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InbExactModifiers">Wheter to check for exact modifiers.</param>
            <param name="InbCaptureInput">Wheter to capture input.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,Portal.Input.EKeyModifier)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InModifierKeys">Modifier keys to bind.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,Portal.Input.EKeyModifier,System.Boolean)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InModifierKeys">Modifier keys to bind.</param>
            <param name="InbExactModifiers">Whater to check for exact modifiers.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,Portal.Input.EKeyState)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InKeyState">Key state(Up or Down) to bind.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,Portal.Input.EKeyState,System.Boolean)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InKeyState">Key state(Up or Down) to bind.</param>
            <param name="InbExactModifiers">Whater to check for exact modifiers.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,Portal.Input.EKeyState,System.Boolean,System.Boolean)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InKeyState">Key state(Up or Down) to bind.</param>
            <param name="InbExactModifiers">Whater to check for exact modifiers.</param>
            <param name="InbCaptureInput">Whater to capture input.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,Portal.Input.EKeyState,Portal.Input.EKeyModifier)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InKeyState">Key state(Up or Down) to bind.</param>
            <param name="InModifierKeys">Modifier keys to bind.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.EKey,System.Action,Portal.Input.EKeyState,Portal.Input.EKeyModifier,System.Boolean,System.Boolean)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InKey">Key to bind.</param>
            <param name="InAction">Action to bind.</param>
            <param name="InKeyState">Key state(Up or Down) to bind.</param>
            <param name="InModifierKeys">Modifier keys to bind.</param>
            <param name="bExactModifiers">Whater to check for exact modifiers.</param>
            <param name="InbCaptureInput">Whater to capture input.</param>
        </member>
        <member name="M:Portal.Input.InputManager.BindKey(Portal.Input.InputBinding)">
            <summary>
            Binds a key to an action.
            </summary>
            <param name="InBinding">Input binding.</param>
        </member>
        <member name="M:Portal.Input.InputManager.SendInput(System.Collections.Generic.List{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Boolean)">
            <summary>
            Sends input to the system, synchronously.
            </summary>
            <param name="InInput"> Input to send. </param>
            <param name="InOptions"> Input options to send with. </param>
            <param name="InbShouldPrint"/>
        </member>
        <member name="M:Portal.Input.InputManager.SendInput(Portal.Input.InputData,System.Nullable{Portal.Input.InputOptions},System.Boolean)">
            <summary>
            Sends input to the system, synchronously.
            </summary>
            <param name="InInput"> Input to send. </param>
            <param name="InOptions"> Input options to send with. </param>
            <param name="InbShouldPrint"/>
        </member>
        <member name="M:Portal.Input.InputManager.SendInput_Async(Portal.Input.InputData,System.Nullable{Portal.Input.InputOptions},System.Action,System.Boolean)">
            <summary>
            Sends input to the system, asynchronously.
            </summary>
            <param name="InInput"> Input to send. </param>
            <param name="InOptions"> Input options to send with. </param>
            <param name="InOnInputPressed"> Action to call when input has been sent. </param>
            <param name="InbShouldPrint"/>
        </member>
        <member name="M:Portal.Input.InputManager.SendInput_Async(System.Collections.Generic.List{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Action,System.Boolean)">
            <summary>
            Sends input to the system, asynchronously.
            </summary>
            <param name="InInput"> Input to send. </param>
            <param name="InOptions"> Input options to send with. </param>
            <param name="InOnInputPressed"> Action to call when input has been sent. </param>
            <param name="InbShouldPrint"/>
        </member>
        <member name="M:Portal.Input.InputManager.Click(System.Nullable{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Sends down and up input, with optional movement options.
            </summary>
            <param name="InInput">Input to send.</param>
            <param name="InOptions">Input options to send with.</param>
            <param name="InMouseMoveOptions">Mouse move options to send with.</param>
            <param name="InbShouldPrint">Wheter to print.</param>
            <remarks>
            If movement is specified, <see cref="P:Portal.Input.MouseMoveOptions.OnMoveEnd"/> is overridden to send input when move ends.
            </remarks>
        </member>
        <member name="M:Portal.Input.InputManager.Click(System.Double,System.Double,System.Nullable{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Moves mouse to specified coordinates, and clicks.
            </summary>
            <param name="InLeftPercent">X coordinate in screen percentage to move to.</param>
            <param name="InTopPercent">Y coordinate in screen percentage to move to.</param>
            <param name="InInput">Input to send.</param>
            <param name="InOptions">Input options to send with.</param>
            <param name="InMouseMoveOptions">Mouse move options to send with.</param>
            <param name="InbShouldPrint">Wheter to print.</param>
            <remarks>
            <see cref="P:Portal.Input.MouseMoveOptions.OnMoveEnd"/> is overridden to send input when move ends.
            </remarks>
        </member>
        <member name="M:Portal.Input.InputManager.MouseMove(System.Double,System.Double,System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Moves the mouse from one point to another with human like movement or instant, synchronously.
            </summary>
            <param name="InLeftPercent">X coordinate in screen percentage to move to.</param>
            <param name="InTopPercent">Y coordinate in screen percentage to move to.</param>
            <param name="InMouseMoveOptions">Mouse move options to send with.</param>
            <param name="InbShouldPrint">Wheter to print.</param>
        </member>
        <member name="M:Portal.Input.InputManager.MouseMove(Portal.Input.MouseMoveOptions,System.Boolean)">
            <summary>
            Moves the mouse from one point to another with human like movement or instant, synchronously.
            </summary>
            <param name="InMouseMoveOptions">Mouse move options to send with.</param>
            <param name="InbShouldPrint">Wheter to print.</param>
        </member>
        <member name="M:Portal.Input.InputManager.MouseMove_Async(Portal.Input.MouseMoveOptions,System.Boolean)">
            <summary>
            Moves the mouse from one point to another with human like movement or instant, asynchronously.
            </summary>
            <param name="InMouseMoveOptions">Mouse move options to send with.</param>
            <param name="InbShouldPrint">Wheter to print.</param>
        </member>
        <member name="M:Portal.Input.InputManager.MouseMoveMulti(System.Collections.Generic.List{Portal.GamePoint},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Moves the mouse through a list of points with human like movement or instant, synchronously.
            </summary>
            <param name="InPoints">List of points to move through.</param>
            <param name="InMouseMoveOptions">Mouse move options to send with.</param>
            <param name="InbShouldPrint">Wheter to print.</param>
            <remarks>
            <see cref="!:InMouseMoveOptions"/>' <see cref="P:Portal.Input.MouseMoveOptions.Destination"/> will be overridden for each point.
            </remarks>
        </member>
        <member name="M:Portal.Input.InputManager.MouseMoveMulti_Async(System.Collections.Generic.List{Portal.GamePoint},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Moves the mouse through a list of points with human like movement or instant, asynchronously.
            </summary>
            <param name="InPoints">List of points to move through.</param>
            <param name="InMouseMoveOptions">Mouse move options to send with.</param>
            <param name="InbShouldPrint">Wheter to print.</param>
        </member>
        <member name="M:Portal.Input.InputManager.StopMouseMove">
            <summary>
            Stops the current mouse move.
            </summary>
        </member>
        <member name="M:Portal.Input.InputManager.IsCurrentMoveID(System.Nullable{System.Guid})">
            <summary>
            Determines if the current mouse move is the specified ID.
            </summary>
            <param name="InID">The ID to check.</param>
            <returns>True if the current mouse move is the specified ID; otherwise, false.</returns>
        </member>
        <member name="M:Portal.Input.InputManager.ClearState">
            <summary>
            Clears the current state of the input manager.
            </summary>
        </member>
        <member name="M:Portal.Input.InputManager.IsExtendedKey(Portal.Input.EKey)">
            <summary>
            Determines if the <see cref="T:Portal.Input.EKey"/> is an ExtendedKey
            </summary>
            <param name="InKeyCode">The key code.</param>
            <returns>true if the key code is an extended key; otherwise, false.</returns>
            <remarks>
            The extended keys consist of the ALT and CTRL keys on the right-hand side of the keyboard; 
            the INS, DEL, HOME, END, PAGE UP, PAGE DOWN, and arrow keys in the clusters 
            to the left of the numeric keypad; the NUM LOCK key; the BREAK (CTRL+PAUSE) key; 
            the PRINT SCRN key; and the divide (/) and ENTER keys in the numeric keypad.
            
            See http://msdn.microsoft.com/en-us/library/ms646267(v=vs.85).aspx Section "Extended-Key Flag"
            </remarks>
        </member>
        <member name="T:Portal.Input.InputOptions">
            <summary>
            Input options.
            </summary>
        </member>
        <member name="P:Portal.Input.InputOptions.Modifiers">
            <summary> Modifiers to send key with. </summary>
        </member>
        <member name="P:Portal.Input.InputOptions.ReleaseDelay">
            <summary> Delay before key release. </summary>
        </member>
        <member name="P:Portal.Input.InputOptions.PressDelay">
            <summary> Delay before key press. </summary>
        </member>
        <member name="P:Portal.Input.InputOptions.bForceSend">
            <summary> Sends even when script is stopped. </summary>
        </member>
        <member name="M:Portal.Input.InputOptions.#ctor(Portal.Input.EKeyModifier,System.Int32,System.Int32,System.Boolean)">
            <summary>
            InputOptions constructor that takes modifiers, a press delay and a release delay.
            </summary>
            <param name="InModifiers"/>
            <param name="InReleaseDelay"/>
            <param name="InPressDelay"/>
            <param name="InbForceSend"/>
        </member>
        <member name="M:Portal.Input.InputOptions.op_Implicit(Portal.Input.EKeyModifier)~Portal.Input.InputOptions">
            <summary> Cast operator. <br/> Allows you to cast <see cref="T:Portal.Input.EKeyModifier"/> to input options. </summary>
        </member>
        <member name="T:Portal.Input.MouseMoveOptions">
            <summary>
            Mouse move options.
            </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.Destination">
            <summary> Destination to move mouse to. </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.Speed">
            <summary> Speed to move mouse with. </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.Gravity">
            <summary> Strength pulling the mouse towards the destination. </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.Wind">
            <summary> Strength pulling the mouse in random directions. </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.TargetArea">
            <summary> Radius of area around the destination that should trigger slowing, prevents spiraling. </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.DestRange">
            <summary> Random destination offset. </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.MoveType">
            <summary> If false, use human-like mouse movement. </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.OnMoveEnd">
            <summary> Action to be performed when the mouse reaches the destination. </summary>
        </member>
        <member name="P:Portal.Input.MouseMoveOptions.bForceMove">
            <summary> Moves even when script is stopped. </summary>
        </member>
        <member name="M:Portal.Input.MouseMoveOptions.op_Implicit(Portal.GamePoint)~Portal.Input.MouseMoveOptions">
            <summary> Cast operator. <br/> Allows you to cast <see cref="T:Portal.GamePoint"/> to mouse move options. </summary>
        </member>
        <member name="T:Portal.Printing.PrintManager">
            <summary>
            Print manager, handles printing to the console and log file.
            </summary>
        </member>
        <member name="M:Portal.Printing.PrintManager._Initialize">
            <inheritdoc />
        </member>
        <member name="M:Portal.Printing.PrintManager.Print(System.Object,Portal.Printing.PrintOptions)">
            <summary>
            Prints a message to the console, with a vital info type and white color.
            </summary>
            <param name="InMessage">The message to print.</param>
            <param name="InOptions">Options for the print.</param>
        </member>
        <member name="M:Portal.Printing.PrintManager.PrintMinor(System.Object,Portal.Printing.PrintOptions)">
            <summary>
            Prints a message to the console, with a minor info type and gray color.
            </summary>
            <param name="InMessage">The message to print.</param>
            <param name="InOptions">Options for the print.</param>
        </member>
        <member name="M:Portal.Printing.PrintManager.PrintWarning(System.Object,Portal.Printing.PrintOptions)">
            <summary>
            Prints a message to the console, with a warning type and prefix and yellow color.
            </summary>
            <param name="InMessage">The message to print.</param>
            <param name="InOptions">Options for the print.</param>
        </member>
        <member name="M:Portal.Printing.PrintManager.PrintError(System.Object,Portal.Printing.PrintOptions)">
            <summary>
            Prints a message to the console, with an error type and prefix and red color.
            </summary>
            <param name="InMessage">The message to print.</param>
            <param name="InOptions">Options for the print.</param>
        </member>
        <member name="M:Portal.Printing.PrintManager.PrintAction(System.Object,Portal.Printing.PrintOptions)">
            <summary>
            Prints a message to the console, with an info type and action prefix and cornflower blue color.
            </summary>
            <param name="InMessage">The message to print.</param>
            <param name="InOptions">Options for the print.</param>
        </member>
        <member name="M:Portal.Printing.PrintManager.PrintResult(System.Object,Portal.Printing.PrintOptions)">
            <summary>
            Prints a message to the console, with an info type and result prefix and lime green color.
            </summary>
            <param name="InMessage">The message to print.</param>
            <param name="InOptions">Options for the print.</param>
        </member>
        <member name="M:Portal.Printing.PrintManager.PrintResultFail(System.Object,Portal.Printing.PrintOptions)">
            <summary>
            Prints a message to the console, with a vital info type and result prefix and red color.
            </summary>
            <param name="InMessage">The message to print.</param>
            <param name="InOptions">Options for the print.</param>
        </member>
        <member name="M:Portal.Printing.PrintManager.PrintEmptyLine">
            <summary>
            Prints an empty line to the console.
            </summary>
        </member>
        <member name="M:Portal.Printing.PrintManager.PrintException(System.Exception)">
            <summary>
            Prints an exception to the console.
            </summary>
            <param name="InException">The exception to print.</param>
        </member>
        <member name="M:Portal.Printing.PrintManager.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Portal.Printing.LogType">
            <summary>
            Type of the log.
            </summary>
        </member>
        <member name="F:Portal.Printing.LogType.Diagnostic">
            <summary>
            Diagnostic
            </summary>
        </member>
        <member name="F:Portal.Printing.LogType.Detailed">
            <summary>
            Detailed
            </summary>
        </member>
        <member name="F:Portal.Printing.LogType.Minimal">
            <summary>
            Minimal
            </summary>
        </member>
        <member name="F:Portal.Printing.LogType.WarningsAndErrors">
            <summary>
            Warnings and errors
            </summary>
        </member>
        <member name="F:Portal.Printing.LogType.ErrorsOnly">
            <summary>
            Errors only
            </summary>
        </member>
        <member name="T:Portal.Printing.MessageType">
            <summary>
            Type of the message.
            </summary>
        </member>
        <member name="F:Portal.Printing.MessageType.None">
            <summary>
            No type.
            </summary>
        </member>
        <member name="F:Portal.Printing.MessageType.MinorInfo">
            <summary>
            Minor info.
            </summary>
        </member>
        <member name="F:Portal.Printing.MessageType.Info">
            <summary>
            Info.
            </summary>
        </member>
        <member name="F:Portal.Printing.MessageType.VitalInfo">
            <summary>
            Vital info.
            </summary>
        </member>
        <member name="F:Portal.Printing.MessageType.Warning">
            <summary>
            Warning.
            </summary>
        </member>
        <member name="F:Portal.Printing.MessageType.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="F:Portal.Printing.MessageType.Exception">
            <summary>
            Fatal error/Exception.
            </summary>
        </member>
        <member name="T:Portal.Printing.PrintOptions">
            <summary>
            Options for printing.
            </summary>
        </member>
        <member name="P:Portal.Printing.PrintOptions.Color">
            <summary>
            Color of the text.
            </summary>
        </member>
        <member name="P:Portal.Printing.PrintOptions.MessageType">
            <summary>
            Type of the message.
            </summary>
        </member>
        <member name="P:Portal.Printing.PrintOptions.Prefix">
            <summary>
            Prefix of the message.
            </summary>
        </member>
        <member name="P:Portal.Printing.PrintOptions.bNewLineStart">
            <summary>
            Whether to start a new line before printing.
            </summary>
        </member>
        <member name="P:Portal.Printing.PrintOptions.bNewLineEnd">
            <summary>
            Whether to end the line after printing.
            </summary>
        </member>
        <member name="M:Portal.Printing.PrintOptions.WithColor(Vortice.Mathematics.Color4)">
            <summary>
            Sets the color of the text.
            </summary>
            <param name="InColor">Color of the text.</param>
            <returns>PrintOptions for method chaining.</returns>
        </member>
        <member name="M:Portal.Printing.PrintOptions.WithMessageType(Portal.Printing.MessageType)">
            <summary>
            Sets the type of the message.
            </summary>
            <param name="InMessageType">Type of the message.</param>
            <returns>PrintOptions for method chaining.</returns>
        </member>
        <member name="M:Portal.Printing.PrintOptions.WithPrefix(System.String)">
            <summary>
            Sets the prefix of the message.
            </summary>
            <param name="InPrefix">Prefix of the message.</param>
            <returns>PrintOptions for method chaining.</returns>
        </member>
        <member name="M:Portal.Printing.PrintOptions.WithNewLineStart">
            <summary>
            Sets whether to start a new line before printing.
            </summary>
            <returns>PrintOptions for method chaining.</returns>
        </member>
        <member name="M:Portal.Printing.PrintOptions.WithNewLineEnd">
            <summary>
            Sets whether to end the line after printing.
            </summary>
            <returns>PrintOptions for method chaining.</returns>
        </member>
        <member name="M:Portal.Printing.PrintOptions.op_Implicit(System.String)~Portal.Printing.PrintOptions">
            <summary>
            Allows implicit conversion from string to PrintOptions with prefix.
            </summary>
            <param name="InPrefix">Prefix of the message.</param>
            <returns>PrintOptions with prefix.</returns>
        </member>
        <member name="T:Portal.Script.Languages.PythonBehavior">
            <summary>
            Python script behavior.
            </summary>
            <param name="Engine"></param>
            <param name="Scope"></param>
            <param name="Source"></param>
            <param name="Compiled"></param>
        </member>
        <member name="M:Portal.Script.Languages.PythonBehavior.#ctor(Microsoft.Scripting.Hosting.ScriptEngine,Microsoft.Scripting.Hosting.ScriptScope,Microsoft.Scripting.Hosting.ScriptSource,Microsoft.Scripting.Hosting.CompiledCode)">
            <summary>
            Python script behavior.
            </summary>
            <param name="Engine"></param>
            <param name="Scope"></param>
            <param name="Source"></param>
            <param name="Compiled"></param>
        </member>
        <member name="M:Portal.Script.Languages.PythonBehavior.Init">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.Languages.PythonBehavior.Start">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.Languages.PythonBehavior.Run">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.Languages.PythonBehavior.Stop">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.Languages.PythonBehavior.Clear">
            <inheritdoc />
        </member>
        <member name="T:Portal.Script.Languages.PythonModule">
            <summary>
            Module which contains scripted behaviors written in python.
            </summary>
        </member>
        <member name="M:Portal.Script.Languages.PythonModule.Initialize(Portal.Script.ScriptFile)">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.Languages.PythonModule.InitializeFile(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.Languages.PythonModule.CompileModule">
            <inheritdoc />
        </member>
        <member name="T:Portal.Script.Languages.PythonScriptFile">
            <summary>
            Python script file.
            </summary>
        </member>
        <member name="M:Portal.Script.Languages.PythonScriptFile.Initialize(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Portal.Script.ScriptBehavior">
            <summary>
            This is what all script behaviors should inherit from.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptBehavior.LoopAmount">
            <summary> 
            Amount of times behavior(<see cref="M:Portal.Script.ScriptBehavior.Run"/> function) will loop, can be overridden.
            A value of -1 will loop infinitely.
            
            Default value is 1.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptBehavior.Name">
            <summary>
            Name of the behavior.
            Should be unique, should only be set if you know what you're doing.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptBehavior.Init">
            <summary> 
            Initialization function.
            
            Gets called when its owning module is initializing.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptBehavior.Start">
            <summary> 
            Start function.
            
            Gets called when its Behavior is started.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptBehavior.Run">
            <summary>
            Run function.
            
            Gets called when its Behavior is running, for example by pressing the "Run Behavior" button in the GUI.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptBehavior.Stop">
            <summary> 
            Stop function.
            
            Gets called when its Behavior is stopped.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptBehavior.Clear">
            <summary> 
            Clear function.
            
            Gets called when its Behavior is changed, and it needs to clear its state.
            </summary>
        </member>
        <member name="T:Portal.Script.ScriptCallables">
            <summary>
            Most script callabes are defined here.
            Should be used in scripts, to perform various actions.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptCallables.RandGen">
            <summary>
            Is idle mouse moving?
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptCallables.ShowLatestFrame(System.Int32)">
            <summary>
            Shows the latest captured frame.
            Useful for debugging.
            </summary>
            <param name="InDuration">Duration to show the frame. -1 for infinite. Default is 1000ms.</param>
        </member>
        <member name="M:Portal.Script.ScriptCallables.Wait(System.Int32,System.Boolean)">
            <summary>
            Waits for a specified number of milliseconds.
            </summary>
            <param name="InMilliseconds">Number of milliseconds to wait.</param>
            <param name="InbShouldPrint">Whether to print.</param>
        </member>
        <member name="M:Portal.Script.ScriptCallables.WaitRandom(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Waits for a random number of milliseconds within specified range.
            </summary>
            <param name="InMinMilliseconds">Minimum number of milliseconds to wait.</param>
            <param name="InMaxMilliseconds">Maximum number of milliseconds to wait.</param>
            <param name="InbShouldPrint">Whether to print.</param>
        </member>
        <member name="M:Portal.Script.ScriptCallables.WaitRandomAsync(System.Int32,System.Int32,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Waits for a random number of milliseconds within specified range.
            </summary>
            <param name="InMinMilliseconds">Minimum number of milliseconds to wait.</param>
            <param name="InMaxMilliseconds">Maximum number of milliseconds to wait.</param>
            <param name="InToken">Cancellation token.</param>
            <param name="InbShouldPrint">Whether to print.</param>
        </member>
        <member name="M:Portal.Script.ScriptCallables.WaitAsync(System.Int32,System.Nullable{System.Threading.CancellationToken},System.Boolean)">
            <summary>
            Waits for a specified number of milliseconds.
            </summary>
            <param name="InMilliseconds">Number of milliseconds to wait.</param>
            <param name="InToken">Cancellation token.</param>
            <param name="InbShouldPrint" />
        </member>
        <member name="M:Portal.Script.ScriptCallables.RepeatAction(System.Action,Portal.Detect.RepeatOptions,System.Boolean)">
            <summary>
            Repeats specified action, for a specified amount of loops.
            </summary>
            <param name="InAction">Action to repeat.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InbForce">If true, will run even when script is stopped.</param>
        </member>
        <member name="M:Portal.Script.ScriptCallables.RepeatUntil``1(System.Func{``0},System.Predicate{``0},Portal.Detect.RepeatOptions,System.Boolean)">
            <summary>
            Repeats specified action, for a specified amount of loops, until predicate is true.
            </summary>
            <param name="InAction">Action to repeat.</param>
            <param name="InPredicate">Predicate to check.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InbForce">If true, will run even when script is stopped.</param>
        </member>
        <member name="M:Portal.Script.ScriptCallables.FindMatch(System.String,Portal.Detect.SearchOptions,Portal.Detect.RepeatOptions,System.Action,System.Boolean)">
            <summary>
            Tries to find best match with specified template, with an optional action called when not found, synchronously.
            </summary>
            <param name="InTemplateName">Name of the template.</param>
            <param name="InSearchOptions">Options for searching.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InOnNotFound">Action to call when not found.</param>
            <param name="InbShouldPrint">Whether to print.</param>
            <returns>Returns the first best match found.</returns>
        </member>
        <member name="M:Portal.Script.ScriptCallables.FindMatch(System.Collections.Generic.List{System.String},Portal.Detect.SearchOptions,Portal.Detect.RepeatOptions,System.Action,System.Boolean)">
            <summary>
            Tries to find best match with specified templates, with an optional action called when not found, synchronously.
            </summary>
            <param name="InTemplateNames">List of names of the templates.</param>
            <param name="InSearchOptions">Options for searching.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InOnNotFound">Action to call when not found.</param>
            <param name="InbShouldPrint">Whether to print.</param>
            <returns>Returns the first best match found.</returns>
        </member>
        <member name="M:Portal.Script.ScriptCallables.FindMatchAsync(System.String,Portal.Detect.SearchOptions,Portal.Detect.RepeatOptions,System.Action,System.Boolean)">
            <summary>
            Tries to find best match with specified template, with an optional action called when not found, asynchronously.
            </summary>
            <param name="InTemplateName">Name of the template.</param>
            <param name="InSearchOptions">Options for searching.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InOnNotFound">Action to call when not found.</param>
            <param name="InbShouldPrint">Whether to print.</param>
            <returns>Returns the first best match found.</returns>
        </member>
        <member name="M:Portal.Script.ScriptCallables.FindMatchAsync(System.Collections.Generic.List{System.String},Portal.Detect.SearchOptions,Portal.Detect.RepeatOptions,System.Action,System.Boolean)">
            <summary>
            Tries to find best match with specified templates, with an optional action called when not found, asynchronously.
            </summary>
            <param name="InTemplateNames">List of names of the templates.</param>
            <param name="InSearchOptions">Options for searching.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InOnNotFound">Action to call when not found.</param>
            <param name="InbShouldPrint">Whether to print.</param>
            <returns>Returns the first best match found.</returns>
        </member>
        <member name="M:Portal.Script.ScriptCallables.FindMatches(System.String,Portal.Detect.SearchOptions,Portal.Detect.RepeatOptions,System.Action,System.Boolean)">
            <summary>
            Tries to find all matches with specified template, with an optional action called when not found, synchronously.
            </summary>
            <param name="InTemplateName">Name of the template.</param>
            <param name="InSearchOptions">Options for searching.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InOnNotFound">Action to call when not found.</param>
            <param name="InbShouldPrint">Whether to print.</param>
            <returns>Returns all matches found.</returns>
        </member>
        <member name="M:Portal.Script.ScriptCallables.FindMatches(System.Collections.Generic.List{System.String},Portal.Detect.SearchOptions,Portal.Detect.RepeatOptions,System.Action,System.Boolean)">
            <summary>
            Tries to find all matches with specified templates, with an optional action called when not found, synchronously.
            </summary>
            <param name="InTemplateNames">List of names of the templates.</param>
            <param name="InSearchOptions">Options for searching.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InOnNotFound">Action to call when not found.</param>
            <param name="InbShouldPrint">Whether to print.</param>
            <returns>Returns all matches found.</returns>
        </member>
        <member name="M:Portal.Script.ScriptCallables.FindMatchesAsync(System.String,Portal.Detect.SearchOptions,Portal.Detect.RepeatOptions,System.Action,System.Boolean)">
            <summary>
            Tries to find all matches with specified template, with an optional action called when not found, asynchronously.
            </summary>
            <param name="InTemplateName">Name of the template.</param>
            <param name="InSearchOptions">Options for searching.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InOnNotFound">Action to call when not found.</param>
            <param name="InbShouldPrint">Whether to print.</param>
            <returns>Returns all matches found.</returns>
        </member>
        <member name="M:Portal.Script.ScriptCallables.FindMatchesAsync(System.Collections.Generic.List{System.String},Portal.Detect.SearchOptions,Portal.Detect.RepeatOptions,System.Action,System.Boolean)">
            <summary>
            Tries to find all matches with specified templates, with an optional action called when not found, asynchronously.
            </summary>
            <param name="InTemplateNames">List of names of the templates.</param>
            <param name="InSearchOptions">Options for searching.</param>
            <param name="InRepeatOptions">Options for repeating.</param>
            <param name="InOnNotFound">Action to call when not found.</param>
            <param name="InbShouldPrint">Whether to print.</param>
            <returns>Returns all matches found.</returns>
        </member>
        <member name="T:Portal.Script.ScriptFile">
            <summary>
            This is what all script files should inherit from.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptFile.Script">
            <summary>
            The <see cref="T:System.IO.FileInfo"/> of the script file.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptFile.Contents">
            <summary>
            The contents of the script file.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptFile.FilePath">
            <summary>
            The full path of the script file.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptFile.FileName">
            <summary>
            The name of the script file with the extension.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptFile.FileNameWithoutExtension">
            <summary>
            The name of the script file without the extension.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptFile.Extension">
            <summary>
            The extension of the script file.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptFile.DirInfo">
            <summary>
            The <see cref="T:System.IO.DirectoryInfo"/> of the script file.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptFile.Initialize(System.String)">
            <summary>
            Initializes the script file.
            </summary>
            <param name="InFilePath"></param>
            <returns>The initialized script file.</returns>
        </member>
        <member name="M:Portal.Script.ScriptFile.ToString">
            <inheritdoc />
        </member>
        <member name="T:Portal.Script.ScriptManager">
            <summary>
            Manages all script modules and behaviors.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptManager.Modules">
            <summary>
            All loaded script modules.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptManager.ScriptThread">
            <summary>
            Main script worker, responsible for starting, running and stopping the script.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptManager.SelectedModule">
            <summary>
            The currently selected script module.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptManager.SelectedBehavior">
            <summary>
            The currently selected script behavior.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptManager._Initialize">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.ScriptManager.Tick">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.ScriptManager.SetScriptModule(System.String)">
            <summary>
            Sets the currently selected script module.
            </summary>
            <param name="InModuleName"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.SetScriptBehavior(System.String)">
            <summary>
            Sets the currently selected script behavior.
            </summary>
            <param name="InBehaviorName"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.CanStartScript">
            <summary>
            Checks if the currently selected script module and behavior are valid and can be started.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.StartScript">
            <summary>
            Starts the script.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptManager.StopScript">
            <summary>
            Stops the script.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptManager.ToggleScript">
            <summary>
            Toggles the script.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptManager.OnExit">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.ScriptManager.IsScriptRunning(System.Boolean)">
            <summary>
            Checks if the script is running.
            </summary>
            <param name="InbForce"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.IsModuleSelected(System.Int32)">
            <summary>
            Checks if the given module is selected.
            </summary>
            <param name="InIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.IsModuleSelected(System.String)">
            <summary>
            Checks if the given module is selected.
            </summary>
            <param name="InModule"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.GetModuleIndex(System.String)">
            <summary>
            Gets the index of the given module.
            </summary>
            <param name="InModuleName"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.IsBehaviorSelected(System.Int32)">
            <summary>
            Checks if the given behavior is selected.
            </summary>
            <param name="InIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.IsBehaviorSelected(System.String)">
            <summary>
            Checks if the given behavior is selected.
            </summary>
            <param name="InBehavior"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.GetBehaviorIndex(System.String)">
            <summary>
            Gets the index of the given behavior.
            </summary>
            <param name="InBehaviorName"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptManager.Dispose">
            <inheritdoc />
        </member>
        <member name="T:Portal.Script.ScriptModule">
            <summary>
            Module which contains scripted behaviors.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.Name">
            <summary>
            Name of the module.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.ModulePath">
            <summary>
            Path to the module.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.TemplatePath">
            <summary>
            Path to the module's template folder.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.ModuleFile">
            <summary>
            Module's main file.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.ModuleData">
            <summary>
            Module's data, like module type, accepted extensions, etc.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.ModuleHash">
            <summary>
            Hash of the module's folder.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.Files">
            <summary>
            Files in the module.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.Behaviors">
            <summary>
            Behaviors in the module.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.Templates">
            <summary>
            Templates in the module.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.ErrorCount">
            <summary>
            Amount of errors that occurred while compiling the module.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptModule.bHasScriptChanged">
            <summary>
            Whether the module's script has changed since last reload.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptModule.Initialize(Portal.Script.ScriptFile)">
            <summary>
            Initializes the module.
            </summary>
            <param name="InModuleFile"></param>
            <returns>The initialized module, or null if the module failed to initialize.</returns>
        </member>
        <member name="M:Portal.Script.ScriptModule.Reload">
            <summary>
            Reloads the module.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptModule.InitializeFile(System.String)">
            <summary>
            Initializes a script file.
            </summary>
            <param name="InFileName"></param>
            <returns></returns>
        </member>
        <member name="M:Portal.Script.ScriptModule.CompileModule">
            <summary>
            Compiles the module.
            </summary>
            <returns>True if the module compiled successfully, false otherwise.</returns>
        </member>
        <member name="M:Portal.Script.ScriptModule.LoadTemplates">
             <summary>
             Loads the module's templates.
             Templates are loaded from the module's <see cref="P:Portal.Script.ScriptModule.TemplatePath"/>.
            
             Each template is loaded as a <see cref="T:Portal.Detect.Template"/> object, which contains the template's name, image, mask, and metadata.
             If a template has an associated .meta file, the metadata will be loaded from it.
             </summary>
        </member>
        <member name="T:Portal.Script.ScriptModuleJson">
            <summary>
            Module's data, like module type, accepted extensions, etc.
            </summary>
            <param name="Type">For example, "PythonModule".</param>
            <param name="AcceptedExtensions">For example, [".py"].</param>
        </member>
        <member name="M:Portal.Script.ScriptModuleJson.#ctor(System.String,System.String[])">
            <summary>
            Module's data, like module type, accepted extensions, etc.
            </summary>
            <param name="Type">For example, "PythonModule".</param>
            <param name="AcceptedExtensions">For example, [".py"].</param>
        </member>
        <member name="P:Portal.Script.ScriptModuleJson.Type">
            <summary>For example, "PythonModule".</summary>
        </member>
        <member name="P:Portal.Script.ScriptModuleJson.AcceptedExtensions">
            <summary>For example, [".py"].</summary>
        </member>
        <member name="T:Portal.Script.ScriptWorker">
            <summary>
            Base class for script workers.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptWorker.TickInterval">
            <summary>
            Interval between ticks in milliseconds.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptWorker.bRequireScriptRunning">
            <summary>
            If true, worker can only be started when script is running.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptWorker.bStartPaused">
            <summary>
            If true, worker will start paused.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptWorker.WorkerTask">
            <summary>
            Task that runs worker.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptWorker.Cancellation">
            <summary>
            Cancellation token source for worker.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptWorker.CancelToken">
            <summary>
            Cancellation token for worker.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptWorker.bIsWorking">
            <summary>
            If true, worker is running.
            </summary>
        </member>
        <member name="P:Portal.Script.ScriptWorker.bIsPaused">
            <summary>
            If true, worker is paused.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptWorker.Start">
            <summary>
            Starts new script worker.
            A script worker is a task that runs on a separate thread, and can be paused and unpaused.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptWorker.Stop">
            <summary>
            Stops worker.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptWorker.Pause">
            <summary>
            Pauses worker.
            Worker will not tick while paused.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptWorker.Unpause">
            <summary>
            Unpauses worker.
            Worker will tick while unpaused.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptWorker.OnStart">
            <summary>
            Called when worker is started.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptWorker.OnTick">
            <summary>
            Called when worker ticks.
            </summary>
            <returns>Task for async.</returns>
        </member>
        <member name="M:Portal.Script.ScriptWorker.OnStop">
            <summary>
            Called when worker is stopped.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptWorker.OnPause">
            <summary>
            Called when worker is paused.
            </summary>
        </member>
        <member name="M:Portal.Script.ScriptWorker.OnUnpause">
            <summary>
            Called when worker is unpaused.
            </summary>
        </member>
        <member name="T:Portal.Script.Workers.MainScriptWorker">
            <summary>
            Main script worker, this is the worker that runs scripts.
            </summary>
        </member>
        <member name="P:Portal.Script.Workers.MainScriptWorker.TickInterval">
            <inheritdoc />
        </member>
        <member name="P:Portal.Script.Workers.MainScriptWorker.bRequireScriptRunning">
            <inheritdoc />
        </member>
        <member name="P:Portal.Script.Workers.MainScriptWorker.LoopedAmount">
            <summary>
            Amount of times the script has looped.
            </summary>
        </member>
        <member name="P:Portal.Script.Workers.MainScriptWorker.RunningBehavior">
            <summary>
            The behavior that is currently running.
            </summary>
        </member>
        <member name="M:Portal.Script.Workers.MainScriptWorker.OnStart">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.Workers.MainScriptWorker.OnTick">
            <inheritdoc />
        </member>
        <member name="M:Portal.Script.Workers.MainScriptWorker.OnStop">
            <inheritdoc />
        </member>
        <member name="T:Portal.GamePoint">
            <summary>
            Represents a point/position/location in the game.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.LeftPercent">
            <summary>
            Left percent.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.TopPercent">
            <summary>
            Top percent.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.X">
            <summary>
            X coordinate.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.Y">
            <summary>
            Y coordinate.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.Left">
            <summary>
            Left in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.Top">
            <summary>
            Top in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.XGlobal">
            <summary>
            X in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.YGlobal">
            <summary>
            Y in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.LeftGlobal">
            <summary>
            Left in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GamePoint.TopGlobal">
            <summary>
            Top in screen coordinates.
            </summary>
        </member>
        <member name="M:Portal.GamePoint.#ctor(System.Double,System.Double)">
            <summary>
            Creates a new <see cref="T:Portal.GamePoint"/> with the specified percentage values.
            </summary>
            <param name="InLeftPercent"></param>
            <param name="InTopPercent"></param>
        </member>
        <member name="M:Portal.GamePoint.#ctor(System.ValueTuple{System.Int32,System.Int32})">
            <summary>
            Creates a new <see cref="T:Portal.GamePoint"/> with the specified absolute values.
            </summary>
            <param name="InPoint"></param>
        </member>
        <member name="M:Portal.GamePoint.#ctor(Windows.Win32.Foundation.POINT)">
            <summary>
            Creates a new <see cref="T:Portal.GamePoint"/> by converting the specified <see cref="T:Windows.Win32.Foundation.POINT"/> to game coordinates.
            </summary>
            <param name="InPoint"></param>
        </member>
        <member name="M:Portal.GamePoint.#ctor(OpenCvSharp.Point)">
            <summary>
            Creates a new <see cref="T:Portal.GamePoint"/> by converting the specified <see cref="T:OpenCvSharp.Point"/> to game coordinates.
            </summary>
            <param name="InPoint"></param>
        </member>
        <member name="M:Portal.GamePoint.#ctor(System.Drawing.Point)">
            <summary>
            Creates a new <see cref="T:Portal.GamePoint"/> by converting the specified <see cref="T:System.Drawing.Point"/> to game coordinates.
            </summary>
            <param name="InPoint"></param>
        </member>
        <member name="M:Portal.GamePoint.#ctor(Portal.Point)">
            <summary>
            Creates a new <see cref="T:Portal.GamePoint"/> by converting the specified <see cref="T:Portal.Point"/> to game coordinates.
            </summary>
            <param name="InPoint"></param>
        </member>
        <member name="M:Portal.GamePoint.#ctor(System.Double)">
            <summary>
            Creates a new <see cref="T:Portal.GamePoint"/> with the specified absolute values.
            </summary>
            <param name="InValue"></param>
        </member>
        <member name="M:Portal.GamePoint.MakeFromCoords(System.Int32,System.Int32)">
            <summary>
            Converts the specified screen coordinates to game coordinates.
            </summary>
            <param name="InX">The X coordinate on the screen. ((InX - (double)GameRegion.X) / GameRegion.Width * 100d)</param>
            <param name="InY">The Y coordinate on the screen. ((InY - (double)GameRegion.Y) / GameRegion.Height * 100d)</param>
            <returns>A <see cref="T:Portal.GamePoint"/> representing the game coordinates.</returns>
        </member>
        <member name="M:Portal.GamePoint.MakeFromRelativeCoords(System.Int32,System.Int32)">
            <summary>
            Converts the specified relative screen coordinates to game coordinates.
            </summary>
            <param name="InX">The X coordinate on the screen, relative to the game region's width.</param>
            <param name="InY">The Y coordinate on the screen, relative to the game region's height.</param>
            <returns>A <see cref="T:Portal.GamePoint"/> representing the game coordinates.</returns>
        </member>
        <member name="M:Portal.GamePoint.Inflate(System.Double,System.Double)">
            <summary>
            Inflates the point by the specified values.
            </summary>
            <param name="InX"/>
            <param name="InY"/>
        </member>
        <member name="M:Portal.GamePoint.InflateRelative(System.Int32,System.Int32)">
            <summary>
            Inflates the point by the specified values.
            </summary>
            <param name="InX"/>
            <param name="InY"/>
        </member>
        <member name="M:Portal.GamePoint.Offset(System.Double,System.Double)">
            <summary>
            Offsets the point by the specified values.
            </summary>
            <param name="InX"/>
            <param name="InY"/>
        </member>
        <member name="M:Portal.GamePoint.OffsetRelative(System.Int32,System.Int32)">
            <summary>
            Offsets the point by the specified values.
            </summary>
            <param name="InX"/>
            <param name="InY"/>
        </member>
        <member name="M:Portal.GamePoint.Click(System.Nullable{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Nullable{Portal.Input.MouseMoveOptions})">
            <summary>
            Moves the mouse to this point, and clicks.
            </summary>
            <remarks>
            See <see cref="M:Portal.Input.InputManager.Click(System.Nullable{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)"/> for more information
            </remarks>
            <param name="InInput"/>
            <param name="InInputOptions"/>
            <param name="InMouseMoveOptions"/>
        </member>
        <member name="M:Portal.GamePoint.Move(System.Nullable{Portal.Input.MouseMoveOptions})">
            <summary>
            Moves the mouse to this point.
            </summary>
            <remarks>
            See <see cref="M:Portal.Input.InputManager.MouseMove(Portal.Input.MouseMoveOptions,System.Boolean)"/> for more information
            </remarks>
            <param name="InMouseMoveOptions"/>
        </member>
        <member name="M:Portal.GamePoint.Draw(System.Int32,System.Nullable{Vortice.Mathematics.Color4})">
            <summary>
            Draws the point on the screen.
            </summary>
            <remarks>
            See <see cref="M:Portal.UI.Drawer.DrawerWindow.Draw(System.Guid,Portal.UI.Drawer.DrawData,System.Int32)"/> for more information
            </remarks>
            <param name="InDuration"/>
            <param name="InColor"/>
        </member>
        <member name="P:Portal.GameRegion.LeftPercent">
            <summary>
            Left percent.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.TopPercent">
            <summary>
            Top percent.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.RightPercent">
            <summary>
            Right percent.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.BottomPercent">
            <summary>
            Bottom percent.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.X">
            <summary>
            X in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Y">
            <summary>
            Y in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Width">
            <summary>
            Width in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Height">
            <summary>
            Height in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Left">
            <summary>
            Left in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Top">
            <summary>
            Top in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Right">
            <summary>
            Right in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Bottom">
            <summary>
            Buttom in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.XGlobal">
            <summary>
            X in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.YGlobal">
            <summary>
            Y in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.WidthGlobal">
            <summary>
            Width in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.HeightGlobal">
            <summary>
            Height in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.LeftGlobal">
            <summary>
            Left in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.TopGlobal">
            <summary>
            Top in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.RightGlobal">
            <summary>
            Right in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.BottomGlobal">
            <summary>
            Buttom in screen coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Center">
            <summary>
            Center of region in percent.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.Rect">
            <summary>
            Region as System.Drawing.Rectangle in game coordinates.
            </summary>
        </member>
        <member name="P:Portal.GameRegion.RectGlobal">
            <summary>
            Region as System.Drawing.Rectangle in screen coordinates.
            </summary>
        </member>
        <member name="M:Portal.GameRegion.Inflate(System.Double,System.Double)">
            <summary>
            Inflates the region by the specified values.
            </summary>
            <param name="InX"/>
            <param name="InY"/>
        </member>
        <member name="M:Portal.GameRegion.InflateRelative(System.Int32,System.Int32)">
            <summary>
            Inflates the region by the specified values.
            </summary>
            <param name="InX"/>
            <param name="InY"/>
        </member>
        <member name="M:Portal.GameRegion.Offset(System.Double,System.Double)">
            <summary>
            Offsets the region by the specified values.
            </summary>
            <param name="InX"/>
            <param name="InY"/>
        </member>
        <member name="M:Portal.GameRegion.OffsetRelative(System.Int32,System.Int32)">
            <summary>
            Offsets the region by the specified values.
            </summary>
            <param name="InX"/>
            <param name="InY"/>
        </member>
        <member name="M:Portal.GameRegion.Click(System.Nullable{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Moves the mouse to the center of the region, and clicks.
            </summary>
            <remarks>
            See <see cref="M:Portal.Input.InputManager.Click(System.Nullable{Portal.Input.InputData},System.Nullable{Portal.Input.InputOptions},System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)"/> for more information
            </remarks>
            <param name="InInput"/>
            <param name="InInputOptions"/>
            <param name="InMouseMoveOptions"/>
            <param name="InbUseRegionAsDestRange"/>
        </member>
        <member name="M:Portal.GameRegion.Move(System.Nullable{Portal.Input.MouseMoveOptions},System.Boolean)">
            <summary>
            Moves the mouse to the center of the region.
            </summary>
            <remarks>
            See <see cref="M:Portal.Input.InputManager.MouseMove(Portal.Input.MouseMoveOptions,System.Boolean)"/> for more information
            </remarks>
            <param name="InMouseMoveOptions"/>
            <param name="InbUseRegionAsDestRange"/>
        </member>
        <member name="M:Portal.GameRegion.Draw(System.Int32,System.Nullable{Vortice.Mathematics.Color4})">
            <summary>
            Draws the region on the screen.
            </summary>
            <remarks>
            See <see cref="M:Portal.UI.Drawer.DrawerWindow.Draw(System.Guid,Portal.UI.Drawer.DrawData,System.Int32)"/> for more information
            </remarks>
            <param name="InDuration"/>
            <param name="InColor"/>
        </member>
        <member name="T:Portal.Point">
            <summary>
            Represents an ordered pair of x and y coordinates that define a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:Portal.Point.Empty">
            <summary>
            Creates a new instance of the <see cref='T:Portal.Point'/> class with member data left uninitialized.
            </summary>
        </member>
        <member name="M:Portal.Point.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.Point'/> class with the specified coordinates.
            </summary>
        </member>
        <member name="M:Portal.Point.#ctor(Portal.Size)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.Point'/> class from a <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the Point class using coordinates specified by an integer value.
            </summary>
        </member>
        <member name="P:Portal.Point.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref='T:Portal.Point'/> is empty.
            </summary>
        </member>
        <member name="P:Portal.Point.X">
            <summary>
            Gets the x-coordinate of this <see cref='T:Portal.Point'/>.
            </summary>
        </member>
        <member name="P:Portal.Point.Y">
            <summary>
            Gets the y-coordinate of this <see cref='T:Portal.Point'/>.
            </summary>
        </member>
        <member name="M:Portal.Point.op_Implicit(Portal.Point)~Portal.PointD">
            <summary>
            Creates a <see cref='T:Portal.PointD'/> with the coordinates of the specified <see cref='T:Portal.Point'/>
            </summary>
        </member>
        <member name="M:Portal.Point.op_Explicit(Portal.Point)~Portal.Size">
            <summary>
            Creates a <see cref='T:Portal.Size'/> with the coordinates of the specified <see cref='T:Portal.Point'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.ToVector2">
            <summary>
            Creates a new <see cref="T:System.Numerics.Vector2"/> from this <see cref="T:Portal.PointD"/>.
            </summary>
        </member>
        <member name="M:Portal.Point.op_Addition(Portal.Point,Portal.Size)">
            <summary>
            Translates a <see cref='T:Portal.Point'/> by a given <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.op_Subtraction(Portal.Point,Portal.Size)">
            <summary>
            Translates a <see cref='T:Portal.Point'/> by the negative of a given <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.op_Addition(Portal.Point,Portal.Point)">
            <summary>
            Translates a <see cref='T:Portal.Point'/> by a given <see cref='T:Portal.Point'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.op_Subtraction(Portal.Point,Portal.Point)">
            <summary>
            Translates a <see cref='T:Portal.Point'/> by the negative of a given <see cref='T:Portal.Point'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.op_Equality(Portal.Point,Portal.Point)">
            <summary>
            Compares two <see cref='T:Portal.Point'/> objects. The result specifies whether the values of the
            <see cref='P:Portal.Point.X'/> and <see cref='P:Portal.Point.Y'/> properties of the two
            <see cref='T:Portal.Point'/> objects are equal.
            </summary>
        </member>
        <member name="M:Portal.Point.op_Inequality(Portal.Point,Portal.Point)">
            <summary>
            Compares two <see cref='T:Portal.Point'/> objects. The result specifies whether the values of the
            <see cref='P:Portal.Point.X'/> or <see cref='P:Portal.Point.Y'/> properties of the two
            <see cref='T:Portal.Point'/>  objects are unequal.
            </summary>
        </member>
        <member name="M:Portal.Point.Add(Portal.Point,Portal.Size)">
            <summary>
            Translates a <see cref='T:Portal.Point'/> by a given <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.Add(Portal.Point,Portal.Point)">
            <summary>
            Translates a <see cref='T:Portal.Point'/> by a given <see cref='T:Portal.Point'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.Subtract(Portal.Point,Portal.Size)">
            <summary>
            Translates a <see cref='T:Portal.Point'/> by the negative of a given <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.Subtract(Portal.Point,Portal.Point)">
            <summary>
            Translates a <see cref='T:Portal.Point'/> by the negative of a given <see cref='T:Portal.Point'/> .
            </summary>
        </member>
        <member name="M:Portal.Point.Ceiling(Portal.PointD)">
            <summary>
            Converts a PointF to a Point by performing a ceiling operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Point.Truncate(Portal.PointD)">
            <summary>
            Converts a PointF to a Point by performing a truncate operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Point.Round(Portal.PointD)">
            <summary>
            Converts a PointF to a Point by performing a round operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Point.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref='T:Portal.Point'/> contains the same coordinates as the specified
            <see cref='T:System.Object'/>.
            </summary>
        </member>
        <member name="M:Portal.Point.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
        </member>
        <member name="M:Portal.Point.Offset(System.Int32,System.Int32)">
            <summary>
            Translates this <see cref='T:Portal.Point'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.Point.Offset(Portal.Point)">
            <summary>
            Translates this <see cref='T:Portal.Point'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.Point.op_Explicit(Portal.Point)~System.Numerics.Vector2">
            <summary>
            Converts the specified <see cref="T:Portal.Point"/> to a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="M:Portal.Point.ToString">
            <summary>
            Converts this <see cref='T:Portal.Point'/> to a human readable string.
            </summary>
        </member>
        <member name="T:Portal.PointD">
            <summary>
            Represents an ordered pair of x and y coordinates that define a point in a two-dimensional plane.
            </summary>
        </member>
        <member name="F:Portal.PointD.Empty">
            <summary>
            Creates a new instance of the <see cref='T:Portal.PointD'/> class with member data left uninitialized.
            </summary>
        </member>
        <member name="M:Portal.PointD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.PointD'/> class with the specified coordinates.
            </summary>
        </member>
        <member name="M:Portal.PointD.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.PointD'/> struct from the specified
            <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="M:Portal.PointD.ToVector2">
            <summary>
            Creates a new <see cref="T:System.Numerics.Vector2"/> from this <see cref="T:Portal.PointD"/>.
            </summary>
        </member>
        <member name="P:Portal.PointD.IsEmpty">
            <summary>
            Gets a value indicating whether this <see cref='T:Portal.PointD'/> is empty.
            </summary>
        </member>
        <member name="P:Portal.PointD.X">
            <summary>
            Gets the x-coordinate of this <see cref='T:Portal.PointD'/>.
            </summary>
        </member>
        <member name="P:Portal.PointD.Y">
            <summary>
            Gets the y-coordinate of this <see cref='T:Portal.PointD'/>.
            </summary>
        </member>
        <member name="M:Portal.PointD.op_Explicit(Portal.PointD)~System.Numerics.Vector2">
            <summary>
            Converts the specified <see cref="T:Portal.PointD"/> to a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="M:Portal.PointD.op_Addition(Portal.PointD,Portal.Size)">
            <summary>
            Translates a <see cref='T:Portal.PointD'/> by a given <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.PointD.op_Subtraction(Portal.PointD,Portal.Size)">
            <summary>
            Translates a <see cref='T:Portal.PointD'/> by the negative of a given <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.PointD.op_Addition(Portal.PointD,Portal.SizeD)">
            <summary>
            Translates a <see cref='T:Portal.PointD'/> by a given <see cref='T:Portal.SizeD'/> .
            </summary>
        </member>
        <member name="M:Portal.PointD.op_Subtraction(Portal.PointD,Portal.SizeD)">
            <summary>
            Translates a <see cref='T:Portal.PointD'/> by the negative of a given <see cref='T:Portal.SizeD'/> .
            </summary>
        </member>
        <member name="M:Portal.PointD.op_Equality(Portal.PointD,Portal.PointD)">
            <summary>
            Compares two <see cref='T:Portal.PointD'/> objects. The result specifies whether the values of the
            <see cref='P:Portal.PointD.X'/> and <see cref='P:Portal.PointD.Y'/> properties of the two
            <see cref='T:Portal.PointD'/> objects are equal.
            </summary>
        </member>
        <member name="M:Portal.PointD.op_Inequality(Portal.PointD,Portal.PointD)">
            <summary>
            Compares two <see cref='T:Portal.PointD'/> objects. The result specifies whether the values of the
            <see cref='P:Portal.PointD.X'/> or <see cref='P:Portal.PointD.Y'/> properties of the two
            <see cref='T:Portal.PointD'/> objects are unequal.
            </summary>
        </member>
        <member name="M:Portal.PointD.Add(Portal.PointD,Portal.Size)">
            <summary>
            Translates a <see cref='T:Portal.PointD'/> by a given <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.PointD.Subtract(Portal.PointD,Portal.Size)">
            <summary>
            Translates a <see cref='T:Portal.PointD'/> by the negative of a given <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.PointD.Add(Portal.PointD,Portal.SizeD)">
            <summary>
            Translates a <see cref='T:Portal.PointD'/> by a given <see cref='T:Portal.SizeD'/> .
            </summary>
        </member>
        <member name="M:Portal.PointD.Subtract(Portal.PointD,Portal.SizeD)">
            <summary>
            Translates a <see cref='T:Portal.PointD'/> by the negative of a given <see cref='T:Portal.SizeD'/> .
            </summary>
        </member>
        <member name="M:Portal.PointD.Equals(System.Object)">
            <summary>
            Specifies whether this <see cref='T:Portal.Point'/> contains the same coordinates as the specified
            <see cref='T:System.Object'/>.
            </summary>
        </member>
        <member name="M:Portal.PointD.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
        </member>
        <member name="M:Portal.PointD.Offset(System.Double,System.Double)">
            <summary>
            Translates this <see cref='T:Portal.Point'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.PointD.Offset(Portal.PointD)">
            <summary>
            Translates this <see cref='T:Portal.Point'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.PointD.ToString">
            <summary>
            Converts this <see cref='T:Portal.Point'/> to a human readable string.
            </summary>
        </member>
        <member name="T:Portal.Region">
            <summary>
            Stores the location and size of a rectangular region.
            </summary>
        </member>
        <member name="M:Portal.Region.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.Region'/> class with the specified location
            and size.
            </summary>
        </member>
        <member name="M:Portal.Region.#ctor(Portal.Point,Portal.Size)">
            <summary>
            Initializes a new instance of the Rectangle class with the specified location and size.
            </summary>
        </member>
        <member name="M:Portal.Region.FromLTRB(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref='T:Portal.Region'/> with the specified location and size.
            </summary>
        </member>
        <member name="P:Portal.Region.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of the rectangular region represented by this
            <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.Size">
            <summary>
            Gets or sets the size of this <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.Width">
            <summary>
            Gets or sets the width of the rectangular region defined by this <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.Height">
            <summary>
            Gets or sets the width of the rectangular region defined by this <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.Left">
            <summary>
            Gets the x-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Portal.Region'/> .
            </summary>
        </member>
        <member name="P:Portal.Region.Top">
            <summary>
            Gets the y-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.Right">
            <summary>
            Gets the x-coordinate of the lower-right corner of the rectangular region defined by this
            <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.Bottom">
            <summary>
            Gets the y-coordinate of the lower-right corner of the rectangular region defined by this
            <see cref='T:Portal.Region'/>.
            </summary>
        </member>
        <member name="P:Portal.Region.IsEmpty">
            <summary>
            Tests whether this <see cref='T:Portal.Region'/> has a <see cref='P:Portal.Region.Width'/>
            or a <see cref='P:Portal.Region.Height'/> of 0.
            </summary>
        </member>
        <member name="P:Portal.Region.Center">
            <summary>
            Center of region in coordinates.
            </summary>
        </member>
        <member name="M:Portal.Region.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref='T:Portal.Region'/> with the same location
            and size of this Rectangle.
            </summary>
        </member>
        <member name="M:Portal.Region.op_Equality(Portal.Region,Portal.Region)">
            <summary>
            Tests whether two <see cref='T:Portal.Region'/> objects have equal location and size.
            </summary>
        </member>
        <member name="M:Portal.Region.op_Inequality(Portal.Region,Portal.Region)">
            <summary>
            Tests whether two <see cref='T:Portal.Region'/> objects differ in location or size.
            </summary>
        </member>
        <member name="M:Portal.Region.Ceiling(Portal.RegionD)">
            <summary>
            Converts a RectangleF to a Rectangle by performing a ceiling operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Region.Truncate(Portal.RegionD)">
            <summary>
            Converts a RectangleF to a Rectangle by performing a truncate operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Region.Round(Portal.RegionD)">
            <summary>
            Converts a RectangleF to a Rectangle by performing a round operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Region.Contains(System.Int32,System.Int32)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this
            <see cref='T:Portal.Region'/> .
            </summary>
        </member>
        <member name="M:Portal.Region.Contains(Portal.Point)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this
            <see cref='T:Portal.Region'/> .
            </summary>
        </member>
        <member name="M:Portal.Region.Contains(Portal.Region)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained within the
            rectangular region represented by this <see cref='T:Portal.Region'/> .
            </summary>
        </member>
        <member name="M:Portal.Region.Inflate(System.Int32,System.Int32)">
            <summary>
            Inflates this <see cref='T:Portal.Region'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.Region.Inflate(Portal.Size)">
            <summary>
            Inflates this <see cref='T:Portal.Region'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.Region.Inflate(Portal.Region,System.Int32,System.Int32)">
            <summary>
            Creates a <see cref='T:Portal.Region'/> that is inflated by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.Region.Intersect(Portal.Region)">
            <summary>
            Creates a Rectangle that represents the intersection between this Rectangle and rect.
            </summary>
        </member>
        <member name="M:Portal.Region.Intersect(Portal.Region,Portal.Region)">
            <summary>
            Creates a rectangle that represents the intersection between a and b. If there is no intersection, an
            empty rectangle is returned.
            </summary>
        </member>
        <member name="M:Portal.Region.IntersectsWith(Portal.Region)">
            <summary>
            Determines if this rectangle intersects with rect.
            </summary>
        </member>
        <member name="M:Portal.Region.Union(Portal.Region,Portal.Region)">
            <summary>
            Creates a rectangle that represents the union between a and b.
            </summary>
        </member>
        <member name="M:Portal.Region.Offset(Portal.Point)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.Region.Offset(System.Int32,System.Int32)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.Region.ToString">
            <summary>
            Converts the attributes of this <see cref='T:Portal.Region'/> to a human readable string.
            </summary>
        </member>
        <member name="M:Portal.Region.FromString(System.String)">
            <summary>
            Converts the string representation of a region to its <see cref='T:Portal.Region'/> equivalent.
            </summary>
        </member>
        <member name="T:Portal.RegionD">
            <summary>
            Stores the location and size of a rectangular region.
            </summary>
        </member>
        <member name="F:Portal.RegionD.Empty">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.RegionD'/> class.
            </summary>
        </member>
        <member name="M:Portal.RegionD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.RegionD'/> class with the specified location
            and size.
            </summary>
        </member>
        <member name="M:Portal.RegionD.#ctor(Portal.PointD,Portal.SizeD)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.RegionD'/> class with the specified location
            and size.
            </summary>
        </member>
        <member name="M:Portal.RegionD.#ctor(System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.RegionD'/> struct from the specified
            <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="M:Portal.RegionD.ToVector4">
            <summary>
            Creates a new <see cref="T:System.Numerics.Vector4"/> from this <see cref="T:Portal.RegionD"/>.
            </summary>
        </member>
        <member name="M:Portal.RegionD.op_Explicit(Portal.RegionD)~System.Numerics.Vector4">
            <summary>
            Converts the specified <see cref="T:Portal.RegionD"/> to a <see cref="T:System.Numerics.Vector4"/>.
            </summary>
        </member>
        <member name="M:Portal.RegionD.op_Explicit(System.Numerics.Vector4)~Portal.RegionD">
            <summary>
            Converts the specified <see cref="T:System.Numerics.Vector2"/> to a <see cref="T:Portal.RegionD"/>.
            </summary>
        </member>
        <member name="M:Portal.RegionD.FromLTRB(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a new <see cref='T:Portal.RegionD'/> with the specified location and size.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Location">
            <summary>
            Gets or sets the coordinates of the upper-left corner of the rectangular region represented by this
            <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Size">
            <summary>
            Gets or sets the size of this <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.X">
            <summary>
            Gets or sets the x-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Y">
            <summary>
            Gets or sets the y-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Width">
            <summary>
            Gets or sets the width of the rectangular region defined by this <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Height">
            <summary>
            Gets or sets the height of the rectangular region defined by this <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Left">
            <summary>
            Gets the x-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Portal.RegionD'/> .
            </summary>
        </member>
        <member name="P:Portal.RegionD.Top">
            <summary>
            Gets the y-coordinate of the upper-left corner of the rectangular region defined by this
            <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Right">
            <summary>
            Gets the x-coordinate of the lower-right corner of the rectangular region defined by this
            <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Bottom">
            <summary>
            Gets the y-coordinate of the lower-right corner of the rectangular region defined by this
            <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="P:Portal.RegionD.IsEmpty">
            <summary>
            Tests whether this <see cref='T:Portal.RegionD'/> has a <see cref='P:Portal.RegionD.Width'/> or a <see cref='P:Portal.RegionD.Height'/> of 0.
            </summary>
        </member>
        <member name="P:Portal.RegionD.Center">
            <summary>
            Center of region in coordinates.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Equals(System.Object)">
            <summary>
            Tests whether <paramref name="obj"/> is a <see cref='T:Portal.RegionD'/> with the same location and
            size of this <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="M:Portal.RegionD.op_Equality(Portal.RegionD,Portal.RegionD)">
            <summary>
            Tests whether two <see cref='T:Portal.RegionD'/> objects have equal location and size.
            </summary>
        </member>
        <member name="M:Portal.RegionD.op_Inequality(Portal.RegionD,Portal.RegionD)">
            <summary>
            Tests whether two <see cref='T:Portal.RegionD'/> objects differ in location or size.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Contains(System.Double,System.Double)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this
            <see cref='T:Portal.Region'/> .
            </summary>
        </member>
        <member name="M:Portal.RegionD.Contains(Portal.PointD)">
            <summary>
            Determines if the specified point is contained within the rectangular region defined by this
            <see cref='T:Portal.Region'/> .
            </summary>
        </member>
        <member name="M:Portal.RegionD.Contains(Portal.RegionD)">
            <summary>
            Determines if the rectangular region represented by <paramref name="rect"/> is entirely contained within
            the rectangular region represented by this <see cref='T:Portal.Region'/> .
            </summary>
        </member>
        <member name="M:Portal.RegionD.GetHashCode">
            <summary>
            Gets the hash code for this <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Inflate(System.Double,System.Double)">
            <summary>
            Inflates this <see cref='T:Portal.Region'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Inflate(Portal.SizeD)">
            <summary>
            Inflates this <see cref='T:Portal.Region'/> by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Inflate(Portal.RegionD,System.Double,System.Double)">
            <summary>
            Creates a <see cref='T:Portal.Region'/> that is inflated by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Intersect(Portal.RegionD)">
            <summary>
            Creates a Rectangle that represents the intersection between this Rectangle and rect.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Intersect(Portal.RegionD,Portal.RegionD)">
            <summary>
            Creates a rectangle that represents the intersection between a and b. If there is no intersection, an
            empty rectangle is returned.
            </summary>
        </member>
        <member name="M:Portal.RegionD.IntersectsWith(Portal.RegionD)">
            <summary>
            Determines if this rectangle intersects with rect.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Union(Portal.RegionD,Portal.RegionD)">
            <summary>
            Creates a rectangle that represents the union between a and b.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Offset(Portal.PointD)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.RegionD.Offset(System.Double,System.Double)">
            <summary>
            Adjusts the location of this rectangle by the specified amount.
            </summary>
        </member>
        <member name="M:Portal.RegionD.op_Implicit(Portal.Region)~Portal.RegionD">
            <summary>
            Converts the specified <see cref='T:Portal.Region'/> to a
            <see cref='T:Portal.RegionD'/>.
            </summary>
        </member>
        <member name="M:Portal.RegionD.ToString">
            <summary>
            Converts the <see cref='P:Portal.RegionD.Location'/> and <see cref='P:Portal.RegionD.Size'/>
            of this <see cref='T:Portal.RegionD'/> to a human-readable string.
            </summary>
        </member>
        <member name="T:Portal.Size">
            <summary>
            Represents the size of a rectangular region with an ordered pair of width and height.
            </summary>
        </member>
        <member name="F:Portal.Size.Empty">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.Size'/> class.
            </summary>
        </member>
        <member name="M:Portal.Size.#ctor(Portal.Point)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.Size'/> class from the specified
            <see cref='T:Portal.Point'/>.
            </summary>
        </member>
        <member name="M:Portal.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.Size'/> class from the specified dimensions.
            </summary>
        </member>
        <member name="M:Portal.Size.ToVector2">
            <summary>
            Creates a new <see cref="T:System.Numerics.Vector2"/> from this <see cref="T:Portal.PointD"/>.
            </summary>
        </member>
        <member name="M:Portal.Size.op_Explicit(Portal.Size)~System.Numerics.Vector2">
            <summary>
            Converts the specified <see cref="T:Portal.PointD"/> to a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="M:Portal.Size.op_Implicit(Portal.Size)~Portal.SizeD">
            <summary>
            Converts the specified <see cref='T:Portal.Size'/> to a <see cref='T:Portal.SizeD'/>.
            </summary>
        </member>
        <member name="M:Portal.Size.op_Addition(Portal.Size,Portal.Size)">
            <summary>
            Performs vector addition of two <see cref='T:Portal.Size'/> objects.
            </summary>
        </member>
        <member name="M:Portal.Size.op_Subtraction(Portal.Size,Portal.Size)">
            <summary>
            Contracts a <see cref='T:Portal.Size'/> by another <see cref='T:Portal.Size'/>
            </summary>
        </member>
        <member name="M:Portal.Size.op_Multiply(System.Int32,Portal.Size)">
            <summary>
            Multiplies a <see cref="T:Portal.Size"/> by an <see cref="T:System.Int32"/> producing <see cref="T:Portal.Size"/>.
            </summary>
            <param name="left">Multiplier of type <see cref="T:System.Int32"/>.</param>
            <param name="right">Multiplicand of type <see cref="T:Portal.Size"/>.</param>
            <returns>Product of type <see cref="T:Portal.Size"/>.</returns>
        </member>
        <member name="M:Portal.Size.op_Multiply(Portal.Size,System.Int32)">
            <summary>
            Multiplies <see cref="T:Portal.Size"/> by an <see cref="T:System.Int32"/> producing <see cref="T:Portal.Size"/>.
            </summary>
            <param name="left">Multiplicand of type <see cref="T:Portal.Size"/>.</param>
            <param name="right">Multiplier of type <see cref="T:System.Int32"/>.</param>
            <returns>Product of type <see cref="T:Portal.Size"/>.</returns>
        </member>
        <member name="M:Portal.Size.op_Division(Portal.Size,System.Int32)">
            <summary>
            Divides <see cref="T:Portal.Size"/> by an <see cref="T:System.Int32"/> producing <see cref="T:Portal.Size"/>.
            </summary>
            <param name="left">Dividend of type <see cref="T:Portal.Size"/>.</param>
            <param name="right">Divisor of type <see cref="T:System.Int32"/>.</param>
            <returns>Result of type <see cref="T:Portal.Size"/>.</returns>
        </member>
        <member name="M:Portal.Size.op_Multiply(System.Double,Portal.Size)">
            <summary>
            Multiplies <see cref="T:Portal.Size"/> by a <see cref="T:System.Double"/> producing <see cref="T:Portal.SizeD"/>.
            </summary>
            <param name="left">Multiplier of type <see cref="T:System.Double"/>.</param>
            <param name="right">Multiplicand of type <see cref="T:Portal.Size"/>.</param>
            <returns>Product of type <see cref="T:Portal.SizeD"/>.</returns>
        </member>
        <member name="M:Portal.Size.op_Multiply(Portal.Size,System.Double)">
            <summary>
            Multiplies <see cref="T:Portal.Size"/> by a <see cref="T:System.Double"/> producing <see cref="T:Portal.SizeD"/>.
            </summary>
            <param name="left">Multiplicand of type <see cref="T:Portal.Size"/>.</param>
            <param name="right">Multiplier of type <see cref="T:System.Double"/>.</param>
            <returns>Product of type <see cref="T:Portal.SizeD"/>.</returns>
        </member>
        <member name="M:Portal.Size.op_Division(Portal.Size,System.Double)">
            <summary>
            Divides <see cref="T:Portal.Size"/> by a <see cref="T:System.Double"/> producing <see cref="T:Portal.SizeD"/>.
            </summary>
            <param name="left">Dividend of type <see cref="T:Portal.Size"/>.</param>
            <param name="right">Divisor of type <see cref="T:System.Int32"/>.</param>
            <returns>Result of type <see cref="T:Portal.SizeD"/>.</returns>
        </member>
        <member name="M:Portal.Size.op_Equality(Portal.Size,Portal.Size)">
            <summary>
            Tests whether two <see cref='T:Portal.Size'/> objects are identical.
            </summary>
        </member>
        <member name="M:Portal.Size.op_Inequality(Portal.Size,Portal.Size)">
            <summary>
            Tests whether two <see cref='T:Portal.Size'/> objects are different.
            </summary>
        </member>
        <member name="M:Portal.Size.op_Explicit(Portal.Size)~Portal.Point">
            <summary>
            Converts the specified <see cref='T:Portal.Size'/> to a <see cref='T:Portal.Point'/>.
            </summary>
        </member>
        <member name="P:Portal.Size.IsEmpty">
            <summary>
            Tests whether this <see cref='T:Portal.Size'/> has zero width and height.
            </summary>
        </member>
        <member name="P:Portal.Size.Width">
            <summary>
            Represents the horizontal component of this <see cref='T:Portal.Size'/>.
            </summary>
        </member>
        <member name="P:Portal.Size.Height">
            <summary>
            Represents the vertical component of this <see cref='T:Portal.Size'/>.
            </summary>
        </member>
        <member name="M:Portal.Size.Add(Portal.Size,Portal.Size)">
            <summary>
            Performs vector addition of two <see cref='T:Portal.Size'/> objects.
            </summary>
        </member>
        <member name="M:Portal.Size.Ceiling(Portal.SizeD)">
            <summary>
            Converts a SizeF to a Size by performing a ceiling operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Size.Subtract(Portal.Size,Portal.Size)">
            <summary>
            Contracts a <see cref='T:Portal.Size'/> by another <see cref='T:Portal.Size'/> .
            </summary>
        </member>
        <member name="M:Portal.Size.Truncate(Portal.SizeD)">
            <summary>
            Converts a SizeF to a Size by performing a truncate operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Size.Round(Portal.SizeD)">
            <summary>
            Converts a SizeF to a Size by performing a round operation on all the coordinates.
            </summary>
        </member>
        <member name="M:Portal.Size.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref='T:Portal.Size'/>  with the same dimensions
            as this <see cref='T:Portal.Size'/>.
            </summary>
        </member>
        <member name="M:Portal.Size.GetHashCode">
            <summary>
            Returns a hash code.
            </summary>
        </member>
        <member name="M:Portal.Size.ToString">
            <summary>
            Creates a human-readable string that represents this <see cref='T:Portal.Size'/>.
            </summary>
        </member>
        <member name="M:Portal.Size.Multiply(Portal.Size,System.Int32)">
            <summary>
            Multiplies <see cref="T:Portal.Size"/> by an <see cref="T:System.Int32"/> producing <see cref="T:Portal.Size"/>.
            </summary>
            <param name="size">Multiplicand of type <see cref="T:Portal.Size"/>.</param>
            <param name="multiplier">Multiplier of type <see cref='T:System.Int32'/>.</param>
            <returns>Product of type <see cref="T:Portal.Size"/>.</returns>
        </member>
        <member name="M:Portal.Size.Multiply(Portal.Size,System.Double)">
            <summary>
            Multiplies <see cref="T:Portal.Size"/> by a <see cref="T:System.Double"/> producing <see cref="T:Portal.SizeD"/>.
            </summary>
            <param name="size">Multiplicand of type <see cref="T:Portal.Size"/>.</param>
            <param name="multiplier">Multiplier of type <see cref="T:System.Double"/>.</param>
            <returns>Product of type SizeF.</returns>
        </member>
        <member name="T:Portal.SizeD">
            <summary>
            Represents the size of a rectangular region with an ordered pair of width and height.
            </summary>
        </member>
        <member name="F:Portal.SizeD.Empty">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.SizeD'/> class.
            </summary>
        </member>
        <member name="M:Portal.SizeD.#ctor(Portal.SizeD)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.SizeD'/> class from the specified
            existing <see cref='T:Portal.SizeD'/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.#ctor(Portal.PointD)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.SizeD'/> class from the specified
            <see cref='T:Portal.PointD'/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.#ctor(System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.SizeD'/> struct from the specified
            <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.ToVector2">
            <summary>
            Creates a new <see cref="T:System.Numerics.Vector2"/> from this <see cref="T:Portal.SizeD"/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref='T:Portal.SizeD'/> class from the specified dimensions.
            </summary>
        </member>
        <member name="M:Portal.SizeD.op_Explicit(Portal.SizeD)~System.Numerics.Vector2">
            <summary>
            Converts the specified <see cref="T:Portal.SizeD"/> to a <see cref="T:System.Numerics.Vector2"/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.op_Explicit(System.Numerics.Vector2)~Portal.SizeD">
            <summary>
            Converts the specified <see cref="T:System.Numerics.Vector2"/> to a <see cref="T:Portal.SizeD"/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.op_Addition(Portal.SizeD,Portal.SizeD)">
            <summary>
            Performs vector addition of two <see cref='T:Portal.SizeD'/> objects.
            </summary>
        </member>
        <member name="M:Portal.SizeD.op_Subtraction(Portal.SizeD,Portal.SizeD)">
            <summary>
            Contracts a <see cref='T:Portal.SizeD'/> by another <see cref='T:Portal.SizeD'/>
            </summary>
        </member>
        <member name="M:Portal.SizeD.op_Multiply(System.Double,Portal.SizeD)">
            <summary>
            Multiplies <see cref="T:Portal.SizeD"/> by a <see cref="T:System.Double"/> producing <see cref="T:Portal.SizeD"/>.
            </summary>
            <param name="left">Multiplier of type <see cref="T:System.Double"/>.</param>
            <param name="right">Multiplicand of type <see cref="T:Portal.SizeD"/>.</param>
            <returns>Product of type <see cref="T:Portal.SizeD"/>.</returns>
        </member>
        <member name="M:Portal.SizeD.op_Multiply(Portal.SizeD,System.Double)">
            <summary>
            Multiplies <see cref="T:Portal.SizeD"/> by a <see cref="T:System.Double"/> producing <see cref="T:Portal.SizeD"/>.
            </summary>
            <param name="left">Multiplicand of type <see cref="T:Portal.SizeD"/>.</param>
            <param name="right">Multiplier of type <see cref="T:System.Double"/>.</param>
            <returns>Product of type <see cref="T:Portal.SizeD"/>.</returns>
        </member>
        <member name="M:Portal.SizeD.op_Division(Portal.SizeD,System.Double)">
            <summary>
            Divides <see cref="T:Portal.SizeD"/> by a <see cref="T:System.Double"/> producing <see cref="T:Portal.SizeD"/>.
            </summary>
            <param name="left">Dividend of type <see cref="T:Portal.SizeD"/>.</param>
            <param name="right">Divisor of type <see cref="T:System.Int32"/>.</param>
            <returns>Result of type <see cref="T:Portal.SizeD"/>.</returns>
        </member>
        <member name="M:Portal.SizeD.op_Equality(Portal.SizeD,Portal.SizeD)">
            <summary>
            Tests whether two <see cref='T:Portal.SizeD'/> objects are identical.
            </summary>
        </member>
        <member name="M:Portal.SizeD.op_Inequality(Portal.SizeD,Portal.SizeD)">
            <summary>
            Tests whether two <see cref='T:Portal.SizeD'/> objects are different.
            </summary>
        </member>
        <member name="M:Portal.SizeD.op_Explicit(Portal.SizeD)~Portal.PointD">
            <summary>
            Converts the specified <see cref='T:Portal.SizeD'/> to a <see cref='T:Portal.PointD'/>.
            </summary>
        </member>
        <member name="P:Portal.SizeD.IsEmpty">
            <summary>
            Tests whether this <see cref='T:Portal.SizeD'/> has zero width and height.
            </summary>
        </member>
        <member name="P:Portal.SizeD.Width">
            <summary>
            Represents the horizontal component of this <see cref='T:Portal.SizeD'/>.
            </summary>
        </member>
        <member name="P:Portal.SizeD.Height">
            <summary>
            Represents the vertical component of this <see cref='T:Portal.SizeD'/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.Add(Portal.SizeD,Portal.SizeD)">
            <summary>
            Performs vector addition of two <see cref='T:Portal.SizeD'/> objects.
            </summary>
        </member>
        <member name="M:Portal.SizeD.Subtract(Portal.SizeD,Portal.SizeD)">
            <summary>
            Contracts a <see cref='T:Portal.SizeD'/> by another <see cref='T:Portal.SizeD'/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.Equals(System.Object)">
            <summary>
            Tests to see whether the specified object is a <see cref='T:Portal.SizeD'/>  with the same dimensions
            as this <see cref='T:Portal.SizeD'/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.ToString">
            <summary>
            Creates a human-readable string that represents this <see cref='T:Portal.SizeD'/>.
            </summary>
        </member>
        <member name="M:Portal.SizeD.Multiply(Portal.SizeD,System.Double)">
            <summary>
            Multiplies <see cref="T:Portal.SizeD"/> by a <see cref="T:System.Double"/> producing <see cref="T:Portal.SizeD"/>.
            </summary>
            <param name="size">Multiplicand of type <see cref="T:Portal.SizeD"/>.</param>
            <param name="multiplier">Multiplier of type <see cref="T:System.Double"/>.</param>
            <returns>Product of type SizeF.</returns>
        </member>
        <member name="M:Portal.Utility.Algorithms.HumanWindMouse(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Generates points of human like mouse movement.
            </summary>
            <param name="InStartX">The starting x position of the mouse.</param>
            <param name="InStartY">The starting y position of the mouse.</param>
            <param name="InEndX">The x coordinate of the end point of the movement.</param>
            <param name="InEndY">The y-coordinate of the end point.</param>
            <param name="InGravity">Strength pulling the position towards the destination.</param>
            <param name="InWind">Strength pulling the position in random directions.</param>
            <param name="InTargetArea">Radius of area around the destination that should trigger slowing, prevents spiraling.</param>
            <returns> List with Tuple of points. </returns>
            <exclude/>
        </member>
        <member name="M:Portal.Utility.Algorithms.BresenhamsLineDistanceOnly(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Generates a list of points that are on the line between the start and end points.
            </summary>
            <param name="InStartX">X coordinate of the starting point of the line.</param>
            <param name="InStartY">Y coordinate of the starting point of the line.</param>
            <param name="InEndX">X coordinate of the end point of the line.</param>
            <param name="InEndY">Y coordinate of the end point of the line.</param>
            <param name="InMaxPoints">Maximum number of points to return.</param>
        </member>
        <member name="M:Portal.Utility.AssertHelpers.Ensure(System.Object,System.String,Portal.Printing.PrintOptions)">
            <summary>
            Checks if specified object is null.
            If null, throws.
            </summary>
            <param name="InObject">Object to check.</param>
            <param name="InMessage" />
            <param name="InOptions" />
        </member>
        <member name="M:Portal.Utility.AssertHelpers.Ensure``1(``0,System.Predicate{``0},System.String,Portal.Printing.PrintOptions)">
            <summary>
            Checks if specified predicate with specified object is true.
            If false, throws.
            </summary>
            <param name="InObject">Object to call predicate with.</param>
            <param name="InPred">Predicate to ensure is true.</param>
            <param name="InMessage" />
            <param name="InOptions" />
        </member>
        <member name="M:Portal.Utility.ClipboardHelpers.GetClipboardText">
            <summary>
            Gets clipboard text on the UI thread.
            </summary>
            <returns>Null if there was no text on the clipboard.</returns>
        </member>
        <member name="M:Portal.Utility.ClipboardHelpers.SetClipboardText(System.String)">
            <summary>
            Sets clipboard text on the UI thread.
            </summary>
            <param name="InText"/>
        </member>
        <member name="M:Portal.Utility.FileHelpers.GetLastLines(System.String,System.Int32)">
            <summary>
            Gets the last N lines of a (text) file.
            </summary>
            <param name="InFilePath"/>
            <param name="InNumOfLines"/>
            <returns>Lines in an array</returns>
        </member>
        <member name="M:Portal.Utility.FileHelpers.ReadAllBytes(System.String)">
            <summary>
            Reads all bytes from a file.
            </summary>
            <param name="path">The file to read.</param>
            <returns>The bytes read from the file.</returns>
        </member>
        <member name="T:Portal.Utility.MonitorHelpers">
            <summary>
            Helper class for PInvoke functions related to monitors.
            </summary>
        </member>
        <member name="M:Portal.Utility.MonitorHelpers.GetCurrentMonitorName">
            <summary>
            Returns the name of the current monitor.
            </summary>
            <returns>The name of the current monitor.</returns>
        </member>
        <member name="M:Portal.Utility.MonitorHelpers.GetCurrentMonitorIndex">
            <summary>
            Returns the index of the current monitor.
            </summary>
            <returns>The index of the current monitor.</returns>
        </member>
        <member name="M:Portal.Utility.MonitorHelpers.GetCurrentMonitorBounds">
            <summary>
            Returns the bounds of the current monitor.
            </summary>
            <returns>The bounds of the current monitor.</returns>
        </member>
        <member name="M:Portal.Utility.MonitorHelpers.GetMonitorBounds(System.Int32@)">
            <summary>
            Returns the bounds of the monitor with the given index.
            </summary>
            <param name="InMonitorIndex">The index of the monitor to get the bounds of. </param>
            <returns>The bounds of the monitor with the given index.</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.B_SplineCurveX(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            B-スプライン曲線を求めます
            </summary>
            <param name="x1">始点の X 座標</param>
            <param name="x2">制御点 の X 座標</param>
            <param name="x3">終点の X 座標</param>
            <param name="t">重み（ 0 ～ 1 ）</param>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.B_SplineCurveY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            B-スプライン曲線を求めます
            </summary>
            <param name="y1">始点の Y 座標</param>
            <param name="y2">制御点 の Y 座標</param>
            <param name="y3">終点の Y 座標</param>
            <param name="t">重み（ 0 ～ 1 ）</param>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.B_SplineCurve(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            B-スプライン曲線を求めます
            </summary>
            <param name="x1">始点の X 座標</param>
            <param name="y1">始点の Y 座標</param>
            <param name="x2">制御点 の X 座標</param>
            <param name="y2">制御点 の Y 座標</param>
            <param name="x3">終点の X 座標</param>
            <param name="y3">終点の Y 座標</param>
            <param name="t">重み（ 0 ～ 1 ）</param>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.BezierCurveX(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ベジェ曲線を求めます
            </summary>
            <param name="x1">始点の X 座標</param>
            <param name="x2">制御点1 の X 座標</param>
            <param name="x3">制御点2 の X 座標</param>
            <param name="x4">終点の X 座標</param>
            <param name="t">重み（ 0 ～ 1 ）</param>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.BezierCurveY(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ベジェ曲線を求めます
            </summary>
            <param name="y1">始点の Y 座標</param>
            <param name="y2">制御点1 の Y 座標</param>
            <param name="y3">制御点2 の Y 座標</param>
            <param name="y4">終点の Y 座標</param>
            <param name="t">重み（ 0 ～ 1 ）</param>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.BezierCurve(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            ベジェ曲線を求めます
            </summary>
            <param name="x1">始点の X 座標</param>
            <param name="y1">始点の Y 座標</param>
            <param name="x2">制御点1 の X 座標</param>
            <param name="y2">制御点1 の Y 座標</param>
            <param name="x3">制御点2 の X 座標</param>
            <param name="y3">制御点2 の Y 座標</param>
            <param name="x4">終点の X 座標</param>
            <param name="y4">終点の Y 座標</param>
            <param name="t">重み（ 0 ～ 1 ）</param>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HyperbolicSpiralX(System.Double,System.Double)">
            <summary>
            双曲螺旋を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HyperbolicSpiralY(System.Double,System.Double)">
            <summary>
            双曲螺旋を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HyperbolicSpiral(System.Double,System.Double)">
            <summary>
            双曲螺旋を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.WitchOfAgnesiX(System.Double,System.Double)">
            <summary>
            アーネシの曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.WitchOfAgnesiY(System.Double,System.Double)">
            <summary>
            アーネシの曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.WitchOfAgnesi(System.Double,System.Double)">
            <summary>
            アーネシの曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.FoliumOfDescartesX(System.Double,System.Double)">
            <summary>
            デカルトの正葉線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.FoliumOfDescartesY(System.Double,System.Double)">
            <summary>
            デカルトの正葉線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.FoliumOfDescartes(System.Double,System.Double)">
            <summary>
            デカルトの正葉線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HyperbolaX(System.Double,System.Double)">
            <summary>
            双曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HyperbolaY(System.Double,System.Double)">
            <summary>
            双曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Hyperbola(System.Double,System.Double,System.Double)">
            <summary>
            双曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.EllipseX(System.Double,System.Double,System.Double)">
            <summary>
            楕円を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.EllipseY(System.Double,System.Double,System.Double)">
            <summary>
            楕円を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Ellipse(System.Double,System.Double,System.Double)">
            <summary>
            楕円を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.InvoluteOfCircleX(System.Double,System.Double)">
            <summary>
            インボリュート曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.InvoluteOfCircleY(System.Double,System.Double)">
            <summary>
            インボリュート曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.InvoluteOfCircle(System.Double,System.Double)">
            <summary>
            インボリュート曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.StrophoidX(System.Double,System.Double)">
            <summary>
            ストロフォイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.StrophoidY(System.Double,System.Double)">
            <summary>
            ストロフォイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Strophoid(System.Double,System.Double)">
            <summary>
            ストロフォイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.ConchoidX(System.Double,System.Double,System.Double)">
            <summary>
            コンコイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.ConchoidY(System.Double,System.Double,System.Double)">
            <summary>
            コンコイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Conchoid(System.Double,System.Double,System.Double)">
            <summary>
            コンコイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.CissoidX(System.Double,System.Double)">
            <summary>
            シッソイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.CissoidY(System.Double,System.Double)">
            <summary>
            シッソイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Cissoid(System.Double,System.Double)">
            <summary>
            シッソイドを求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.LissajousCurveX(System.Double,System.Double,System.Double)">
            <summary>
            リサジュー曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.LissajousCurveY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            リサジュー曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.LissajousCurve(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            リサジュー曲線を求めます
            </summary>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.TrochoidX(System.Double,System.Double,System.Double)">
            <summary>
            トロコイドを求めます
            </summary>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.TrochoidY(System.Double,System.Double,System.Double)">
            <summary>
            トロコイドを求めます
            </summary>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Trochoid(System.Double,System.Double,System.Double)">
            <summary>
            トロコイドを求めます
            </summary>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.EpitrocoidX(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            外トロコイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>外トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.EpitrocoidY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            外トロコイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>外トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Epitrocoid(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            外トロコイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>外トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HypetrocoidX(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            内トロコイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>内トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HypetrocoidY(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            内トロコイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>内トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Hypetrocoid(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            内トロコイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <param name="rd">描画点の半径</param>
            <returns>内トロコイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.CycloidX(System.Double,System.Double)">
            <summary>
            サイクロイドを求めます
            </summary>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.CycloidY(System.Double,System.Double)">
            <summary>
            サイクロイドを求めます
            </summary>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Cycloid(System.Double,System.Double)">
            <summary>
            サイクロイドを求めます
            </summary>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.EpicycloidX(System.Double,System.Double,System.Double)">
            <summary>
            外サイクロイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>外サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.EpicycloidY(System.Double,System.Double,System.Double)">
            <summary>
            外サイクロイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>外サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Epicycloid(System.Double,System.Double,System.Double)">
            <summary>
            外サイクロイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>外サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HypocycloidX(System.Double,System.Double,System.Double)">
            <summary>
            内サイクロイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>内サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.HypocycloidY(System.Double,System.Double,System.Double)">
            <summary>
            内サイクロイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>内サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.ShapeHelpers.Hypocycloid(System.Double,System.Double,System.Double)">
            <summary>
            内サイクロイドを求めます
            </summary>
            <param name="rc">定円の半径</param>
            <param name="rm">動円の半径</param>
            <param name="theta">回転角</param>
            <returns>内サイクロイドの媒介変数</returns>
        </member>
        <member name="M:Portal.Utility.StringHelpers.Substring(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Returns a substring of the current string, starting from the first occurrence of the specified from string, and ending at the first occurrence of the specified until string, or at the end of the string if the specified string is not found.
            </summary>
            <param name="InSourceString">The string to search in.</param>
            <param name="InFrom">The string to search from.</param>
            <param name="InUntil">The string to search for as the end of the substring.</param>
            <param name="InComparison">The type of comparison to perform when searching for the specified string.</param>
        </member>
        <member name="M:Portal.Utility.StringHelpers.ConvertToSnakeCase(System.String)">
            <summary>
            Converts a string to snake_case.
            </summary>
            <param name="InString">The string to convert.</param>
            <returns>The converted string.</returns>
        </member>
        <member name="M:Portal.Utility.StringHelpers.RemovePrefixes(System.String)">
            <summary>
            Removes In and b prefixes from a string.
            </summary>
            <param name="InString">The string to remove prefixes from.</param>
            <returns>The string without prefixes.</returns>
        </member>
        <member name="P:Windows.Win32.__char_32.Length">
            <summary>The length of the inline array.</summary>
        </member>
        <member name="P:Windows.Win32.__char_32.Item(System.Int32)">
            <summary>
            Gets a ref to an individual element of the inline array.
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned reference outlive the stack frame that defines it.
            </summary>
        </member>
        <member name="M:Windows.Win32.__char_32.AsSpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_32.AsReadOnlySpan">
            <summary>
            Gets this inline array as a span.
            </summary>
            <remarks>
            ⚠ Important ⚠: When this struct is on the stack, do not let the returned span outlive the stack frame that defines it.
            </remarks>
        </member>
        <member name="M:Windows.Win32.__char_32.ToString(System.Int32)">
            <summary>
            Copies the fixed array to a new string up to the specified length regardless of whether there are null terminating characters.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name="length"/> is less than <c>0</c> or greater than <see cref="P:Windows.Win32.__char_32.Length"/>.
            </exception>
        </member>
        <member name="M:Windows.Win32.__char_32.ToString">
            <summary>
            Copies the fixed array to a new string, stopping before the first null terminator character or at the end of the fixed array (whichever is shorter).
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT">
            <summary>Contains information about a simulated message generated by an input device other than a keyboard or mouse.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-hardwareinput">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT.uMsg">
            <summary>
            <para>Type: <b>DWORD</b> The message generated by the input hardware.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-hardwareinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT.wParamL">
            <summary>
            <para>Type: <b>WORD</b> The low-order word of the <i>lParam </i> parameter for <b>uMsg</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-hardwareinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.HARDWAREINPUT.wParamH">
            <summary>
            <para>Type: <b>WORD</b> The high-order word of the <i>lParam </i> parameter for <b>uMsg</b>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-hardwareinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT">
            <summary>Used by SendInput to store information for synthesizing input events such as keystrokes, mouse movement, and mouse clicks.</summary>
            <remarks><b> INPUT_KEYBOARD</b> supports nonkeyboard input methods, such as handwriting recognition or voice recognition, as if it were text input by using the <b>KEYEVENTF_UNICODE</b> flag. For more information, see the remarks section of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-keybdinput">KEYBDINPUT</a>.</remarks>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.INPUT.type">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="T:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT">
            <summary>Contains information about a simulated keyboard event.</summary>
            <remarks>
            <para><b> INPUT_KEYBOARD</b> supports nonkeyboard-input methods—such as handwriting recognition or voice recognition—as if it were text input by using the <b>KEYEVENTF_UNICODE</b> flag. If <b>KEYEVENTF_UNICODE</b> is specified, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-sendinput">SendInput</a> sends a <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-keydown">WM_KEYDOWN</a> or <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-keyup">WM_KEYUP</a> message to the foreground thread's message queue with <i>wParam</i> equal to <b>VK_PACKET</b>. Once <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessage">GetMessage</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-peekmessagea">PeekMessage</a> obtains this message, passing the message to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-translatemessage">TranslateMessage</a> posts a <a href="https://docs.microsoft.com/windows/desktop/inputdev/wm-char">WM_CHAR</a> message with the Unicode character originally specified by <b>wScan</b>. This Unicode character will automatically be converted to the appropriate ANSI value if it is posted to an ANSI window. Set the <b>KEYEVENTF_SCANCODE</b> flag to define keyboard input in terms of the scan code. This is useful for simulating a physical keystroke regardless of which keyboard is currently being used. You can also pass the <b>KEYEVENTF_EXTENDEDKEY</b> flag if the scan code is an extended key. The virtual key value of a key can change depending on the current keyboard layout or what other keys were pressed, but the scan code will always be the same.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-keybdinput#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.wVk">
            <summary>
            <para>Type: <b>WORD</b> A <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">virtual-key code</a>. The code must be a value in the range 1 to 254. If the <b>dwFlags</b> member specifies <b>KEYEVENTF_UNICODE</b>, <b>wVk</b> must be 0.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-keybdinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.wScan">
            <summary>
            <para>Type: <b>WORD</b> A hardware scan code for the key. If <b>dwFlags</b> specifies <b>KEYEVENTF_UNICODE</b>, <b>wScan</b> specifies a Unicode character which is to be sent to the foreground application.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-keybdinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.dwFlags">
            <summary>Type: <b>DWORD</b></summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.time">
            <summary>
            <para>Type: <b>DWORD</b> The time stamp for the event, in milliseconds. If this parameter is zero, the system will provide its own time stamp.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-keybdinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.KEYBDINPUT.dwExtraInfo">
            <summary>
            <para>Type: <b>ULONG_PTR</b> An additional value associated with the keystroke. Use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmessageextrainfo">GetMessageExtraInfo</a> function to obtain this information.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-keybdinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT">
            <summary>Contains information about a simulated mouse event.</summary>
            <remarks>
            <para>If the mouse has moved, indicated by **MOUSEEVENTF_MOVE**, **dx** and **dy** specify information about that movement. The information is specified as absolute or relative integer values. If **MOUSEEVENTF_ABSOLUTE** value is specified, **dx** and **dy** contain normalized absolute coordinates between 0 and 65,535. The event procedure maps these coordinates onto the display surface. Coordinate (0,0) maps onto the upper-left corner of the display surface; coordinate (65535,65535) maps onto the lower-right corner. In a multimonitor system, the coordinates map to the primary monitor. If **MOUSEEVENTF_VIRTUALDESK** is specified, the coordinates map to the entire virtual desktop. If the **MOUSEEVENTF_ABSOLUTE** value is not specified, **dx**and **dy** specify movement relative to the previous mouse event (the last reported position). Positive values mean the mouse moved right (or down); negative values mean the mouse moved left (or up). Relative mouse motion is subject to the effects of the mouse speed and the two-mouse threshold values. A user sets these three values with the **Pointer Speed** slider of the Control Panel's **Mouse Properties** sheet. You can obtain and set these values using the [SystemParametersInfo](/windows/desktop/api/winuser/nf-winuser-systemparametersinfoa) function. The system applies two tests to the specified relative mouse movement. If the specified distance along either the x or y axis is greater than the first mouse threshold value, and the mouse speed is not zero, the system doubles the distance. If the specified distance along either the x or y axis is greater than the second mouse threshold value, and the mouse speed is equal to two, the system doubles the distance that resulted from applying the first threshold test. It is thus possible for the system to multiply specified relative mouse movement along the x or y axis by up to four times.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-mouseinput#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.dx">
            <summary>
            <para>Type: **LONG** The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the **dwFlags** member. Absolute data is specified as the x coordinate of the mouse; relative data is specified as the number of pixels moved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-mouseinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.dy">
            <summary>
            <para>Type: **LONG** The absolute position of the mouse, or the amount of motion since the last mouse event was generated, depending on the value of the **dwFlags** member. Absolute data is specified as the y coordinate of the mouse; relative data is specified as the number of pixels moved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-mouseinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.mouseData" -->
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.dwFlags">
            <summary>Type: **DWORD**</summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.time">
            <summary>
            <para>Type: **DWORD** The time stamp for the event, in milliseconds. If this parameter is 0, the system will provide its own time stamp.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-mouseinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.UI.Input.KeyboardAndMouse.MOUSEINPUT.dwExtraInfo">
            <summary>
            <para>Type: **ULONG_PTR** An additional value associated with the mouse event. An application calls [GetMessageExtraInfo](/windows/desktop/api/winuser/nf-winuser-getmessageextrainfo) to obtain this extra information.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-mouseinput#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.MONITORINFO">
            <summary>The MONITORINFO structure contains information about a display monitor.The GetMonitorInfo function stores information in a MONITORINFO structure or a MONITORINFOEX structure.The MONITORINFO structure is a subset of the MONITORINFOEX structure.</summary>
            <remarks>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo">Learn more about this API from docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.cbSize">
            <summary>
            <para>The size of the structure, in bytes. Set this member to <c>sizeof ( MONITORINFO )</c> before calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getmonitorinfoa">GetMonitorInfo</a> function. Doing so lets the function determine the type of structure you are passing to it.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.rcMonitor">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the display monitor rectangle, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.rcWork">
            <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies the work area rectangle of the display monitor, expressed in virtual-screen coordinates. Note that if the monitor is not the primary display monitor, some of the rectangle's coordinates may be negative values.</summary>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFO.dwFlags">
            <summary>
            <para>A set of flags that represent attributes of the display monitor. The following flag is defined. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfo#members">Read more on docs.microsoft.com</see>.</para>
            </summary>
        </member>
        <member name="T:Windows.Win32.Graphics.Gdi.MONITORINFOEXW">
            <summary>The MONITORINFOEX structure contains information about a display monitor.The GetMonitorInfo function stores information into a MONITORINFOEX structure or a MONITORINFO structure.The MONITORINFOEX structure is a superset of the MONITORINFO structure. (Unicode)</summary>
            <remarks>
            <para>> [!NOTE] > The winuser.h header defines MONITORINFOEX as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/ns-winuser-monitorinfoexw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="F:Windows.Win32.Graphics.Gdi.MONITORINFOEXW.szDevice">
            <summary>A string that specifies the device name of the monitor being used.  Most applications have no use for a display monitor name, and so can save some bytes by using a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> structure.</summary>
        </member>
        <member name="T:Windows.Win32.FreeLibrarySafeHandle">
            <summary>
            Represents a Win32 handle that can be closed with <see cref="M:Windows.Win32.PInvoke.FreeLibrary(Windows.Win32.Foundation.HMODULE)"/>.
            </summary>
        </member>
        <member name="T:Windows.Win32.Foundation.PCWSTR">
            <summary>
            A pointer to a null-terminated, constant character string.
            </summary>
        </member>
        <member name="F:Windows.Win32.Foundation.PCWSTR.Value">
            <summary>
            A pointer to the first character in the string. The content should be considered readonly, as it was typed as constant in the SDK.
            </summary>
        </member>
        <member name="P:Windows.Win32.Foundation.PCWSTR.Length">
            <summary>
            Gets the number of characters up to the first null character (exclusive).
            </summary>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.ToString">
            <summary>
            Returns a <see langword="string"/> with a copy of this character array, up to the first null character (exclusive).
            </summary>
            <returns>A <see langword="string"/>, or <see langword="null"/> if <see cref="F:Windows.Win32.Foundation.PCWSTR.Value"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:Windows.Win32.Foundation.PCWSTR.AsSpan">
            <summary>
            Returns a span of the characters in this string, up to the first null character (exclusive).
            </summary>
        </member>
        <member name="T:Windows.Win32.PInvoke">
            <content>
            Contains extern methods from "KERNEL32.dll".
            </content>
            <content>
            Contains extern methods from "USER32.dll".
            </content>
        </member>
        <member name="M:Windows.Win32.PInvoke.FreeLibrary(Windows.Win32.Foundation.HMODULE)">
            <summary>Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.</summary>
            <param name="hLibModule">
            <para>A handle to the loaded library module. The <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a>, <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>, or <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandleexa">GetModuleHandleEx</a> function returns this handle.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call the <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> function.</para>
            </returns>
            <remarks>
            <para>The system maintains a per-process reference count for each loaded module. A  module that was loaded at process initialization due to load-time dynamic linking has a reference count of one. The reference count for a module is incremented each time the  module is loaded by a call to <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibrarya">LoadLibrary</a>. The reference count is also incremented by a call to <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a> unless the  module  is being loaded for the first time and is being loaded as   a data or image file. The reference count is decremented each time the <b>FreeLibrary</b> or <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a> function is called for the module. When a  module's reference count reaches zero or the process terminates, the system unloads the module from the address space of the  process. Before unloading a library module, the system enables the module to detach from the process by calling the module's <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a> function, if it has one, with the DLL_PROCESS_DETACH value. Doing so gives the library module an opportunity to clean up resources allocated on behalf of the current process. After the entry-point function returns, the library module is removed from the address space of the current process. It is not safe to call <b>FreeLibrary</b> from <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a>. For more information, see the Remarks section in <a href="https://docs.microsoft.com/windows/desktop/Dlls/dllmain">DllMain</a>. Calling <b>FreeLibrary</b> does not affect other processes that are using the same module. Use caution when calling <b>FreeLibrary</b> with a handle returned by <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandlea">GetModuleHandle</a>. The <b>GetModuleHandle</b> function does not increment a module's reference count, so passing this handle to <b>FreeLibrary</b> can cause a module to be unloaded prematurely. A thread that must unload the DLL in which it is executing and then terminate itself should call <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a> instead of calling <b>FreeLibrary</b> and <b>ExitThread</b> separately. Otherwise, a race condition can occur. For details, see the Remarks section of <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibraryandexitthread">FreeLibraryAndExitThread</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-freelibrary#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetModuleHandle(System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetModuleHandle(Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetModuleHandle(Windows.Win32.Foundation.PCWSTR)">
            <summary>Retrieves a module handle for the specified module. The module must have been loaded by the calling process. (Unicode)</summary>
            <param name="lpModuleName">
            <para>The name of the loaded module (either a .dll or .exe file). If the file name extension is omitted, the default library extension .dll is appended. The file name string can include a trailing point character (.) to indicate that the module name has no extension. The string does not have to specify a path. When specifying a path, be sure to use backslashes (\\), not forward slashes (/). The name is compared (case independently) to the names of modules currently mapped into the address space of the calling process.</para>
            <para>If this parameter is NULL, <b>GetModuleHandle</b> returns a handle to the file used to create the calling process (.exe file). The <b>GetModuleHandle</b> function does not retrieve handles for modules that were loaded using the <b>LOAD_LIBRARY_AS_DATAFILE</b> flag. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-loadlibraryexa">LoadLibraryEx</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulehandlew#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is a handle to the specified module. If the function fails, the return value is NULL. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>The returned handle is not global or inheritable. It cannot be duplicated or used by another process. If <i>lpModuleName</i> does not include a path and there is more than one loaded module with the same base name and extension, you cannot predict which module handle will be returned. To work around this problem, you could specify a path, use <a href="https://docs.microsoft.com/windows/desktop/Msi/side-by-side-assemblies">side-by-side assemblies</a>, or use <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-getmodulehandleexa">GetModuleHandleEx</a> to specify a memory location rather than a DLL name. The <b>GetModuleHandle</b> function returns a handle to a mapped module without incrementing its reference count. However, if this handle is passed to the <a href="https://docs.microsoft.com/windows/desktop/api/libloaderapi/nf-libloaderapi-freelibrary">FreeLibrary</a> function, the reference count of the mapped module will be decremented. Therefore, do not pass a handle returned by <b>GetModuleHandle</b> to the <b>FreeLibrary</b> function. Doing so can cause a DLL module to be unmapped prematurely. This function must be used carefully in a multithreaded application. There is no guarantee that the module handle remains valid between the time this function returns the handle and the time it is used. For example, suppose that a thread retrieves a module handle, but before it uses the handle, a second thread frees the module. If the system loads another module, it could reuse the module handle that was recently freed. Therefore, the first thread would have a handle to a different module  than the one intended.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/libloaderapi/nf-libloaderapi-getmodulehandlew#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCursorPos(System.Drawing.Point@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetCursorPos(System.Drawing.Point*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetCursorPos(System.Drawing.Point*)">
            <summary>Retrieves the position of the mouse cursor, in screen coordinates.</summary>
            <param name="lpPoint">
            <para>Type: <b>LPPOINT</b> A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/windef/ns-windef-point">POINT</a> structure that receives the screen coordinates of the cursor.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> Returns nonzero if successful or zero otherwise. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>The cursor position is always specified in screen coordinates and is not affected by the mapping mode of the window that contains the cursor. The calling process must have <b>WINSTA_READATTRIBUTES</b> access to the window station. The input desktop must be the current desktop when you call <b>GetCursorPos</b>. Call <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openinputdesktop">OpenInputDesktop</a> to determine whether the current desktop is the input desktop. If it is not, call <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setthreaddesktop">SetThreadDesktop</a> with the <b>HDESK</b> returned by <b>OpenInputDesktop</b> to switch to that desktop.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getcursorpos#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetCursorPos(System.Int32,System.Int32)">
            <summary>Moves the cursor to the specified screen coordinates.</summary>
            <param name="X">
            <para>Type: <b>int</b> The new x-coordinate of the cursor, in screen coordinates.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="Y">
            <para>Type: <b>int</b> The new y-coordinate of the cursor, in screen coordinates.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setcursorpos#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> Returns nonzero if successful or zero otherwise. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para>The cursor is a shared resource. A window should move the cursor only when the cursor is in the window's client area. The calling process must have <b>WINSTA_WRITEATTRIBUTES</b> access to the window station. The input desktop must be the current desktop when you call <b>SetCursorPos</b>. Call <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-openinputdesktop">OpenInputDesktop</a> to determine whether the current desktop is the input desktop. If it is not, call <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setthreaddesktop">SetThreadDesktop</a> with the <b>HDESK</b> returned by <b>OpenInputDesktop</b> to switch to that desktop.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setcursorpos#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.UnhookWindowsHookEx(Windows.Win32.UI.WindowsAndMessaging.HHOOK)">
            <summary>Removes a hook procedure installed in a hook chain by the SetWindowsHookEx function.</summary>
            <param name="hhk">
            <para>Type: <b>HHOOK</b> A handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowshookexa">SetWindowsHookEx</a>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-unhookwindowshookex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>The hook procedure can be in the state of being called by another thread even after <b>UnhookWindowsHookEx</b> returns. If the hook procedure is not being called concurrently, the hook procedure is removed immediately before <b>UnhookWindowsHookEx</b> returns.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetWindowsHookEx(Windows.Win32.UI.WindowsAndMessaging.WINDOWS_HOOK_ID,Windows.Win32.UI.WindowsAndMessaging.HOOKPROC,System.Runtime.InteropServices.SafeHandle,System.UInt32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SetWindowsHookEx(Windows.Win32.UI.WindowsAndMessaging.WINDOWS_HOOK_ID,Windows.Win32.UI.WindowsAndMessaging.HOOKPROC,Windows.Win32.Foundation.HINSTANCE,System.UInt32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetWindowsHookEx(Windows.Win32.UI.WindowsAndMessaging.WINDOWS_HOOK_ID,Windows.Win32.UI.WindowsAndMessaging.HOOKPROC,Windows.Win32.Foundation.HINSTANCE,System.UInt32)">
            <summary>Installs an application-defined hook procedure into a hook chain. (Unicode)</summary>
            <param name="idHook">Type: <b>int</b></param>
            <param name="lpfn">
            <para>Type: <b>HOOKPROC</b> A pointer to the hook procedure. If the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by a different process, the <i>lpfn</i> parameter must point to a hook procedure in a DLL. Otherwise, <i>lpfn</i> can point to a hook procedure in the code associated with the current process.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwindowshookexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="hmod">
            <para>Type: <b>HINSTANCE</b> A handle to the DLL containing the hook procedure pointed to by the <i>lpfn</i> parameter. The <i>hMod</i> parameter must be set to <b>NULL</b> if the <i>dwThreadId</i> parameter specifies a thread created by the current process and if the hook procedure is within the code associated with the current process.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwindowshookexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="dwThreadId">
            <para>Type: <b>DWORD</b> The identifier of the thread with which the hook procedure is to be associated. For desktop apps, if this parameter is zero, the hook procedure is associated with all existing threads running in the same desktop as the calling thread. For Windows Store apps, see the Remarks section.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwindowshookexw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HHOOK</b> If the function succeeds, the return value is the handle to the hook procedure. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>
            <para><b>SetWindowsHookEx</b> can be used to inject a DLL into another process. A 32-bit DLL cannot be injected into a 64-bit process, and a 64-bit DLL cannot be injected into a 32-bit process. If an application requires the use of hooks in other processes, it is required that a 32-bit application call <b>SetWindowsHookEx</b> to inject a 32-bit DLL into 32-bit processes, and a 64-bit application call <b>SetWindowsHookEx</b> to inject a 64-bit DLL into 64-bit processes. The 32-bit and 64-bit DLLs must have different names.</para>
            <para>Because hooks run in the context of an application, they must match the "bitness" of the application. If a 32-bit application installs a global hook on 64-bit Windows, the 32-bit hook is injected into each 32-bit process (the usual security boundaries apply). In a 64-bit process, the threads are still marked as "hooked." However, because a 32-bit application must run the hook code, the system executes the hook in the hooking app's context; specifically, on the thread that called <b>SetWindowsHookEx</b>. This means that the hooking application must continue to pump messages or it might block the normal functioning of the 64-bit processes.</para>
            <para>If a 64-bit application installs a global hook on 64-bit Windows, the 64-bit hook is injected into each 64-bit process, while all 32-bit processes use a callback to the hooking application.</para>
            <para>To hook all applications on the desktop of a 64-bit Windows installation, install a 32-bit global hook and a 64-bit global hook, each from appropriate processes, and be sure to keep pumping messages in the hooking application to avoid blocking normal functioning. If you already have a 32-bit global hooking application and it doesn't need to run in each application's context, you may not need to create a 64-bit version.</para>
            <para>An error may occur if the <i>hMod</i> parameter is <b>NULL</b> and the <i>dwThreadId</i> parameter is zero or specifies the identifier of a thread created by another process. Calling the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-callnexthookex">CallNextHookEx</a> function to chain to the next hook procedure is optional, but it is highly recommended; otherwise, other applications that have installed hooks will not receive hook notifications and may behave incorrectly as a result. You should call <b>CallNextHookEx</b> unless you absolutely need to prevent the notification from being seen by other applications. Before terminating, an application must call the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-unhookwindowshookex">UnhookWindowsHookEx</a> function to free system resources associated with the hook. The scope of a hook depends on the hook type. Some hooks can be set only with global scope; others can also be set for only a specific thread, as shown in the following table. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwindowshookexw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.CallNextHookEx(System.Runtime.InteropServices.SafeHandle,System.Int32,Windows.Win32.Foundation.WPARAM,Windows.Win32.Foundation.LPARAM)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.CallNextHookEx(Windows.Win32.UI.WindowsAndMessaging.HHOOK,System.Int32,Windows.Win32.Foundation.WPARAM,Windows.Win32.Foundation.LPARAM)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.CallNextHookEx(Windows.Win32.UI.WindowsAndMessaging.HHOOK,System.Int32,Windows.Win32.Foundation.WPARAM,Windows.Win32.Foundation.LPARAM)">
            <summary>Passes the hook information to the next hook procedure in the current hook chain. A hook procedure can call this function either before or after processing the hook information.</summary>
            <param name="hhk">
            <para>Type: <b>HHOOK</b> This parameter is ignored.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-callnexthookex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nCode">
            <para>Type: <b>int</b> The hook code passed to the current hook procedure. The next hook procedure uses this code to determine how to process the hook information.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-callnexthookex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="wParam">
            <para>Type: <b>WPARAM</b> The <i>wParam</i> value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-callnexthookex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lParam">
            <para>Type: <b>LPARAM</b> The <i>lParam</i> value passed to the current hook procedure. The meaning of this parameter depends on the type of hook associated with the current hook chain.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-callnexthookex#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>LRESULT</b> This value is returned by the next hook procedure in the chain. The current hook procedure must also return this value. The meaning of the return value depends on the hook type. For more information, see the descriptions of the individual hook procedures.</para>
            </returns>
            <remarks>
            <para>Hook procedures are installed in chains for particular hook types. <b>CallNextHookEx</b> calls the next hook in the chain. Calling <b>CallNextHookEx</b> is optional, but it is highly recommended; otherwise, other applications that have installed hooks will not receive hook notifications and may behave incorrectly as a result. You should call <b>CallNextHookEx</b> unless you absolutely need to prevent the notification from being seen by other applications.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-callnexthookex#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.FindWindow(System.String,System.String)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.FindWindow(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.FindWindow(Windows.Win32.Foundation.PCWSTR,Windows.Win32.Foundation.PCWSTR)">
            <summary>Retrieves a handle to the top-level window whose class name and window name match the specified strings. This function does not search child windows. This function does not perform a case-sensitive search. (Unicode)</summary>
            <param name="lpClassName">
            <para>Type: <b>LPCTSTR</b> The class name or a class atom created by a previous call to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. The atom must be in the low-order word of <i>lpClassName</i>; the high-order word must be zero. If <i>lpClassName</i> points to a string, it specifies the window class name. The class name can be any name registered with <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassa">RegisterClass</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a>, or any of the predefined control-class names. If <i>lpClassName</i> is <b>NULL</b>, it finds any window whose title matches the <i>lpWindowName</i> parameter.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-findwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpWindowName">
            <para>Type: <b>LPCTSTR</b> The window name (the window's title). If this parameter is <b>NULL</b>, all window names match.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-findwindoww#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>HWND</b> If the function succeeds, the return value is a handle to the window that has the specified class name and window name. If the function fails, the return value is <b>NULL</b>. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>If the <i>lpWindowName</i> parameter is not <b>NULL</b>, <b>FindWindow</b> calls the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getwindowtexta">GetWindowText</a> function to retrieve the window name for comparison. For a description of a potential problem that can arise, see the Remarks for <b>GetWindowText</b>.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetClientRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetClientRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetClientRect(Windows.Win32.Foundation.HWND,Windows.Win32.Foundation.RECT*)">
            <summary>Retrieves the coordinates of a window's client area.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window whose client coordinates are to be retrieved.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpRect">
            <para>Type: <b>LPRECT</b> A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that receives the client coordinates. The <b>left</b> and <b>top</b> members are zero. The <b>right</b> and <b>bottom</b> members contain the width and height of the window.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getclientrect#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the function succeeds, the return value is nonzero. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>.</para>
            </returns>
            <remarks>In conformance with conventions for the <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure, the bottom-right coordinates of the returned rectangle are exclusive. In other words, the pixel at (<b>right</b>, <b>bottom</b>) lies immediately outside the rectangle.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.EnumDisplayMonitors(Windows.Win32.Graphics.Gdi.HDC,System.Nullable{Windows.Win32.Foundation.RECT},Windows.Win32.Graphics.Gdi.MONITORENUMPROC,Windows.Win32.Foundation.LPARAM)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.EnumDisplayMonitors(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.RECT*,Windows.Win32.Graphics.Gdi.MONITORENUMPROC,Windows.Win32.Foundation.LPARAM)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.EnumDisplayMonitors(Windows.Win32.Graphics.Gdi.HDC,Windows.Win32.Foundation.RECT*,Windows.Win32.Graphics.Gdi.MONITORENUMPROC,Windows.Win32.Foundation.LPARAM)">
            <summary>The EnumDisplayMonitors function enumerates display monitors (including invisible pseudo-monitors associated with the mirroring drivers) that intersect a region formed by the intersection of a specified clipping rectangle and the visible region of a device context. EnumDisplayMonitors calls an application-defined MonitorEnumProc callback function once for each monitor that is enumerated. Note that GetSystemMetrics (SM_CMONITORS) counts only the display monitors.</summary>
            <param name="hdc">
            <para>A handle to a display device context that defines the visible region of interest. If this parameter is <b>NULL</b>, the <i>hdcMonitor</i> parameter passed to the callback function will be <b>NULL</b>, and the visible region of interest is the virtual screen that encompasses all the displays on the desktop.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lprcClip">
            <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/windef/ns-windef-rect">RECT</a> structure that specifies a clipping rectangle. The region of interest is the intersection of the clipping rectangle with the visible region specified by <i>hdc</i>. If <i>hdc</i> is non-<b>NULL</b>, the coordinates of the clipping rectangle are relative to the origin of the <i>hdc</i>. If <i>hdc</i> is <b>NULL</b>, the coordinates are virtual-screen coordinates. This parameter can be <b>NULL</b> if you don't want to clip the region specified by <i>hdc</i>.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="lpfnEnum">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> application-defined callback function.</param>
            <param name="dwData">Application-defined data that <b>EnumDisplayMonitors</b> passes directly to the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nc-winuser-monitorenumproc">MonitorEnumProc</a> function.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>There are two reasons to call the <b>EnumDisplayMonitors</b> function: </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-enumdisplaymonitors#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetMonitorInfo(Windows.Win32.Graphics.Gdi.HMONITOR,Windows.Win32.Graphics.Gdi.MONITORINFO*)">
            <summary>The GetMonitorInfo function retrieves information about a display monitor. (Unicode)</summary>
            <param name="hMonitor">A handle to the display monitor of interest.</param>
            <param name="lpmi">
            <para>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> or <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure that receives information about the specified display monitor. You must set the <b>cbSize</b> member of the structure to sizeof(MONITORINFO) or sizeof(MONITORINFOEX) before calling the <b>GetMonitorInfo</b> function. Doing so lets the function determine the type of structure you are passing to it. The <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfoexa">MONITORINFOEX</a> structure is a superset of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-monitorinfo">MONITORINFO</a> structure. It has one additional member: a string that contains a name for the display monitor. Most applications have no use for a display monitor name, and so can save some bytes by using a <b>MONITORINFO</b> structure.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getmonitorinfow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>> [!NOTE] > The winuser.h header defines GetMonitorInfo as an alias which automatically selects the ANSI or Unicode version of this function based on the definition of the UNICODE preprocessor constant. Mixing usage of the encoding-neutral alias with code that not encoding-neutral can lead to mismatches that result in compilation or runtime errors. For more information, see [Conventions for Function Prototypes](/windows/win32/intl/conventions-for-function-prototypes).</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getmonitorinfow#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetWindowLong(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX,System.Int32)">
            <summary>Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory. (Unicode)</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nIndex">Type: <b>int</b></param>
            <param name="dwNewLong">
            <para>Type: <b>LONG</b> The replacement value.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>LONG</b> If the function succeeds, the return value is the previous value of the specified 32-bit integer. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If the previous value of the specified 32-bit integer is zero, and the function succeeds, the return value is zero, but the function does not clear the last error information. This makes it difficult to determine success or failure. To deal with this, you should clear the last error information by calling <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-setlasterror">SetLastError</a> with 0 before calling <b>SetWindowLong</b>. Then, function failure will be indicated by a return value of zero and a <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> result that is nonzero.</para>
            </returns>
            <remarks>
            <para>Certain window data is cached, so changes you make using <b>SetWindowLong</b> will not take effect until you call the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowpos">SetWindowPos</a> function. Specifically, if you change any of the frame styles, you must call <b>SetWindowPos</b> with the <b>SWP_FRAMECHANGED</b> flag for the cache to be updated properly. If you use <b>SetWindowLong</b> with the <b>GWL_WNDPROC</b> index to replace the window procedure, the window procedure must conform to the guidelines specified in the description of the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ms633573(v=vs.85)">WindowProc</a> callback function. If you use <b>SetWindowLong</b> with the <b>DWL_MSGRESULT</b> index to set the return value for a message processed by a dialog procedure, you should return <b>TRUE</b> directly afterward. Otherwise, if you call any function that results in your dialog procedure receiving a window message, the nested window message could overwrite the return value you set using <b>DWL_MSGRESULT</b>. Calling <b>SetWindowLong</b> with the <b>GWL_WNDPROC</b> index creates a subclass of the window class used to create the window. An application can subclass a system class, but should not subclass a window class created by another process. The <b>SetWindowLong</b> function creates the window subclass by changing the window procedure associated with a particular window class, causing the system to call the new window procedure instead of the previous one. An application must pass any messages not processed by the new window procedure to the previous window procedure by calling <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-callwindowproca">CallWindowProc</a>. This allows the application to create a chain of window procedures. Reserve extra window memory by specifying a nonzero value in the <b>cbWndExtra</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassexa">WNDCLASSEX</a> structure used with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function. You must not call <b>SetWindowLong</b> with the <b>GWL_HWNDPARENT</b> index to change the parent of a child window. Instead, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setparent">SetParent</a> function. If the window has a class style of <b>CS_CLASSDC</b> or <b>CS_OWNDC</b>, do not set the extended window styles <b>WS_EX_COMPOSITED</b> or <b>WS_EX_LAYERED</b>. Calling <b>SetWindowLong</b> to set the style on a progressbar will reset its position.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setwindowlongw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetWindowLong(Windows.Win32.Foundation.HWND,Windows.Win32.UI.WindowsAndMessaging.WINDOW_LONG_PTR_INDEX)">
            <summary>Retrieves information about the specified window. (GetWindowLongW)</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window and, indirectly, the class to which the window belongs.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getwindowlongw#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="nIndex">Type: <b>int</b></param>
            <returns>
            <para>Type: <b>LONG</b> If the function succeeds, the return value is the requested value. If the function fails, the return value is zero. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. If <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setwindowlonga">SetWindowLong</a> has not been called previously, <b>GetWindowLong</b> returns zero for values in the extra window or class memory.</para>
            </returns>
            <remarks>
            <para>Reserve extra window memory by specifying a nonzero value in the <b>cbWndExtra</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-wndclassexa">WNDCLASSEX</a> structure used with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-registerclassexa">RegisterClassEx</a> function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getwindowlongw#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.MonitorFromWindow(Windows.Win32.Foundation.HWND,Windows.Win32.Graphics.Gdi.MONITOR_FROM_FLAGS)">
            <summary>The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.</summary>
            <param name="hwnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns>
            <para>If the window intersects one or more display monitor rectangles, the return value is an <b>HMONITOR</b> handle to the display monitor that has the largest area of intersection with the window. If the window does not intersect a display monitor, the return value depends on the value of <i>dwFlags</i>.</para>
            </returns>
            <remarks>If the window is currently minimized, <b>MonitorFromWindow</b> uses the rectangle of the window before it was minimized.</remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SetForegroundWindow(Windows.Win32.Foundation.HWND)">
            <summary>Brings the thread that created the specified window into the foreground and activates the window.</summary>
            <param name="hWnd">
            <para>Type: <b>HWND</b> A handle to the window that should be activated and brought to the foreground.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setforegroundwindow#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>BOOL</b> If the window was brought to the foreground, the return value is nonzero. If the window was not brought to the foreground, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The system restricts which processes can set the foreground window. A process can set the foreground window by calling **SetForegroundWindow** only if: - All of the following conditions are true: - The calling process belongs to a desktop application, not a UWP app or a Windows Store app designed for Windows 8 or 8.1. - The foreground process has not disabled calls to **SetForegroundWindow** by a previous call to the [**LockSetForegroundWindow**](nf-winuser-locksetforegroundwindow.md) function. - The foreground lock time-out has expired (see [**SPI_GETFOREGROUNDLOCKTIMEOUT** in **SystemParametersInfo**](nf-winuser-systemparametersinfoa.md#SPI_GETFOREGROUNDLOCKTIMEOUT)). - No menus are active. - Additionally, at least one of the following conditions is true: - The calling process is the foreground process. - The calling process was started by the foreground process. - There is currently no foreground window, and thus no foreground process. - The calling process received the last input event. - Either the foreground process or the calling process is being debugged. It is possible for a process to be denied the right to set the foreground window even if it meets these conditions. An application cannot force a window to the foreground while the user is working with another window. Instead, Windows flashes the taskbar button of the window to notify the user. A process that can set the foreground window can enable another process to set the foreground window by calling the [**AllowSetForegroundWindow**](nf-winuser-allowsetforegroundwindow.md) function. The process specified by the *dwProcessId* parameter to **AllowSetForegroundWindow** loses the ability to set the foreground window the next time that either the user generates input, unless the input is directed at that process, or the next time a process calls **AllowSetForegroundWindow**, unless the same process is specified as in the previous call to **AllowSetForegroundWindow**. The foreground process can disable calls to <b>SetForegroundWindow</b> by calling the [**LockSetForegroundWindow**](nf-winuser-locksetforegroundwindow.md) function.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-setforegroundwindow#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.ClientToScreen(Windows.Win32.Foundation.HWND,System.Drawing.Point@)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.ClientToScreen(Windows.Win32.Foundation.HWND,System.Drawing.Point*)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.ClientToScreen(Windows.Win32.Foundation.HWND,System.Drawing.Point*)">
            <summary>The ClientToScreen function converts the client-area coordinates of a specified point to screen coordinates.</summary>
            <param name="hWnd">A handle to the window whose client area is used for the conversion.</param>
            <param name="lpPoint">A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/windef/ns-windef-point">POINT</a> structure that contains the client coordinates to be converted. The new screen coordinates are copied into this structure if the function succeeds.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero. If the function fails, the return value is zero.</para>
            </returns>
            <remarks>
            <para>The <b>ClientToScreen</b> function replaces the client-area coordinates in the <a href="https://docs.microsoft.com/windows/win32/api/windef/ns-windef-point">POINT</a> structure with the screen coordinates. The screen coordinates are relative to the upper-left corner of the screen. Note, a screen-coordinate point that is above the window's client area has a negative y-coordinate. Similarly, a screen coordinate to the left of a client area has a negative x-coordinate. All coordinates are device coordinates.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-clienttoscreen#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetAsyncKeyState(System.Int32)">
            <summary>Determines whether a key is up or down at the time the function is called, and whether the key was pressed after a previous call to GetAsyncKeyState.</summary>
            <param name="vKey">
            <para>Type: <b>int</b> The virtual-key code. For more information, see <a href="https://docs.microsoft.com/windows/desktop/inputdev/virtual-key-codes">Virtual Key Codes</a>. You can use left- and right-distinguishing constants to specify certain keys. See the Remarks section for further information.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getasynckeystate#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>SHORT</b> If the function succeeds, the return value specifies whether the key was pressed since the last call to <b>GetAsyncKeyState</b>, and whether the key is currently up or down. If the most significant bit is set, the key is down, and if the least significant bit is set, the key was pressed after the previous call to <b>GetAsyncKeyState</b>. However, you should not rely on this last behavior; for more information, see the Remarks. The return value is zero for the following cases: </para>
            <para>This doc was truncated.</para>
            </returns>
            <remarks>
            <para>The <b>GetAsyncKeyState</b> function works with mouse buttons. However, it checks on the state of the physical mouse buttons, not on the logical mouse buttons that the physical buttons are mapped to. For example, the call <b>GetAsyncKeyState</b>(VK_LBUTTON) always returns the state of the left physical mouse button, regardless of whether it is mapped to the left or right logical mouse button. You can determine the system's current mapping of physical mouse buttons to logical mouse buttons by calling <c>GetSystemMetrics(SM_SWAPBUTTON)</c>. which returns TRUE if the mouse buttons have been swapped. Although the least significant bit of the return value indicates whether the key has been pressed since the last query, due to the preemptive multitasking nature of Windows, another application can call <b>GetAsyncKeyState</b> and receive the "recently pressed" bit instead of your application. The behavior of the least significant bit of the return value is retained strictly for compatibility with 16-bit Windows applications (which are non-preemptive) and should not be relied upon. You can use the virtual-key code constants <b>VK_SHIFT</b>, <b>VK_CONTROL</b>, and <b>VK_MENU</b> as values for the <i>vKey</i> parameter. This gives the state of the SHIFT, CTRL, or ALT keys without distinguishing between left and right. You can use the following virtual-key code constants as values for <i>vKey</i> to distinguish between the left and right instances of those keys. </para>
            <para>This doc was truncated.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-getasynckeystate#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.SendInput(System.Span{Windows.Win32.UI.Input.KeyboardAndMouse.INPUT},System.Int32)">
            <inheritdoc cref="M:Windows.Win32.PInvoke.SendInput(System.UInt32,Windows.Win32.UI.Input.KeyboardAndMouse.INPUT*,System.Int32)"/>
        </member>
        <member name="M:Windows.Win32.PInvoke.SendInput(System.UInt32,Windows.Win32.UI.Input.KeyboardAndMouse.INPUT*,System.Int32)">
            <summary>Synthesizes keystrokes, mouse motions, and button clicks.</summary>
            <param name="cInputs">
            <para>Type: <b>UINT</b> The number of structures in the <i>pInputs</i> array.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="pInputs">
            <para>Type: <b>LPINPUT</b> An array of <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input">INPUT</a> structures. Each structure represents an event to be inserted into the keyboard or mouse input stream.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <param name="cbSize">
            <para>Type: <b>int</b> The size, in bytes, of an <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input">INPUT</a> structure. If <i>cbSize</i> is not the size of an <b>INPUT</b> structure, the function fails.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-sendinput#parameters">Read more on docs.microsoft.com</see>.</para>
            </param>
            <returns>
            <para>Type: <b>UINT</b> The function returns the number of events that it successfully inserted into the keyboard or mouse input stream. If the function returns zero, the input was already blocked by another thread. To get extended error information, call <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a>. This function fails when it is blocked by UIPI. Note that neither <a href="https://docs.microsoft.com/windows/desktop/api/errhandlingapi/nf-errhandlingapi-getlasterror">GetLastError</a> nor the return value will indicate the failure was caused by UIPI blocking.</para>
            </returns>
            <remarks>
            <para>This function is subject to UIPI. Applications are permitted to inject input only into applications that are at an equal or lesser integrity level. The <b>SendInput</b> function inserts the events in the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/ns-winuser-input">INPUT</a> structures serially into the keyboard or mouse input stream. These events are not interspersed with other keyboard or mouse input events inserted either by the user (with the keyboard or mouse) or by calls to <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-keybd_event">keybd_event</a>, <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-mouse_event">mouse_event</a>, or other calls to <b>SendInput</b>. This function does not reset the keyboard's current state. Any keys that are already pressed when the function is called might interfere with the events that this function generates. To avoid this problem, check the keyboard's state with the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-getasynckeystate">GetAsyncKeyState</a> function and correct as necessary. Because the touch keyboard uses the surrogate macros defined in winnls.h to send input to the system, a listener on the keyboard event hook must decode input originating from the touch keyboard. For more information, see <a href="https://docs.microsoft.com/windows/desktop/Intl/surrogates-and-supplementary-characters">Surrogates and Supplementary Characters</a>. An accessibility application can use <b>SendInput</b> to inject keystrokes corresponding to application launch shortcut keys that are handled by the shell.  This  functionality is not guaranteed to work for other types of applications.</para>
            <para><see href="https://learn.microsoft.com/windows/win32/api/winuser/nf-winuser-sendinput#">Read more on docs.microsoft.com</see>.</para>
            </remarks>
        </member>
        <member name="M:Windows.Win32.PInvoke.GetMessageExtraInfo">
            <summary>Retrieves the extra message information for the current thread. Extra message information is an application- or driver-defined value associated with the current thread's message queue.</summary>
            <returns>
            <para>Type: <b>LPARAM</b> The return value specifies the extra information. The meaning of the extra information is device specific.</para>
            </returns>
            <remarks>To set a thread's extra message information, use the <a href="https://docs.microsoft.com/windows/desktop/api/winuser/nf-winuser-setmessageextrainfo">SetMessageExtraInfo</a> function.</remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Windows.Win32.PInvoke.MapVirtualKey(System.UInt32,Windows.Win32.UI.Input.KeyboardAndMouse.MAP_VIRTUAL_KEY_TYPE)" -->
        <member name="T:Windows.Win32.UnhookWindowsHookExSafeHandle">
            <summary>
            Represents a Win32 handle that can be closed with <see cref="M:Windows.Win32.PInvoke.UnhookWindowsHookEx(Windows.Win32.UI.WindowsAndMessaging.HHOOK)"/>.
            </summary>
        </member>
    </members>
</doc>
